---
description:
globs: static/js/**/*.js,templates/**/*.html,static/css/**.css
alwaysApply: false
---
---
description: Governs frontend structure, styling (Tailwind), and basic JS.
globs: static/js/**/*.js,templates/**/*.html,static/css/**.css
tags: frontend, html, css, tailwind, javascript, style, layout
---

# Frontend Styling & Layout Rules

These rules govern the structure and presentation of the frontend components. They complement the Django-specific rules (@file:.cursor/rules/backend/django_rules.mdc) and the core protocol (@file:.cursor/rules/00_core_assistant_protocol.mdc).

## 1. HTML Structure & Layout

*   **Base Layout:** All pages MUST extend the base template: @file:templates/base.html.
*   **Main Container:** Content within sections should generally use a container `div` with `class="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"` for consistent width and padding.
*   **Semantic HTML:** Use appropriate HTML5 semantic tags (`<header>`, `<nav>`, `<main>`, `<section>`, `<footer>`, etc.) to structure content logically.
*   **Partials:** Extract reusable HTML components (e.g., header, footer, cards, forms) into the `templates/partials/` directory and include them using `{% include 'partials/your_partial.html' %}`. Header (@file:templates/partials/_header.html) and Footer (@file:templates/partials/_footer.html) structure derived from v0 `ClientLayout.txt`.
*   **Homepage Sections:** The homepage (@file:templates/core/home.html) is structured using `<section>` tags with specific IDs: `#hero`, `#services`, `#featured-projects`, `#client-portal`, `#news`, `#cta-banner`.
*   **Accessibility:** Keep accessibility (ARIA attributes, semantic structure) in mind, although detailed rules may be added later.

## 2. CSS Styling (Tailwind CSS)

*   **Framework:** Use **Tailwind CSS** for all styling. Apply utility classes directly in the HTML templates.
*   **Configuration:** Configure Tailwind via @file:tailwind.config.js. The main entry point is @file:static/css/main.css, which imports other necessary files. The compiled output is @file:static/css/output.css.
*   **Global Styles & Variables:** Base styles are defined via Tailwind directives (@file:static/css/base/tailwind_directives.css). CSS custom properties (variables) for layout, colors, animations, etc., are centralized in @file:static/css/base/variables.css.
*   **Component Styles:** Component-specific styles, including custom classes and `@keyframes` animations, should be defined in dedicated files within @file:static/css/components/ (e.g., `our_services_card.css`) and imported by `main.css`.
*   **Consistency:** Strive for consistency in spacing, colors, and typography by leveraging the theme defined in `tailwind.config.js` and variables defined in `variables.css`.
*   **Reference:** Consult @file:.cursor/rules/frontend/03_tailwind_config.mdc for specific Tailwind configuration details.
*   **SVGs:** Use `<img>` tag with `{% static 'path/to/file.svg' %}` for standard inclusion. Organize SVGs into subdirectories within @file:static/svg/ (e.g., `general/`, `footer/`, `services/`). For internal styling via CSS, SVGs would need to be modified to use `currentColor` or inlined directly into templates (prefer modification if possible).

## 3. Client-Side Scripting (JavaScript)

*   **Approach:** Write **vanilla JavaScript**. Keep JS minimal and focused.
*   **Basic Interactions:** Use `static/js/script.js` or inline scripts in `base.html` for simple things like mobile menu toggles.
*   **Complex Component Logic:** Use dedicated scripts (e.g., @file:static/js/css_gallery_init.js, @file:static/js/interactive-hero-background.js).
*   **JS Hover State Toggle Pattern:** For complex hover effects involving multiple elements or animations difficult to achieve with pure Tailwind `group-hover`, use this pattern:
    *   **HTML:** Add a marker class (e.g., `service-card-group`) to the parent hover target.
    *   **CSS:** Define base styles and animation `@keyframes` in a component CSS file (e.g., @file:static/css/components/our_services_card.css). Create rules targeting descendant elements based on the parent having an `is-hovered` class (e.g., `.service-card-group.is-hovered .learn-more-text { animation: ...; }`).
    *   **JS:** Create a dedicated script (e.g., @file:static/js/service_card_hover.js) that selects the parent elements and uses `mouseenter`/`mouseleave` event listeners to add/remove the `is-hovered` class.
    *   **Benefits:** Decouples hover detection (JS) from animation/styling (CSS), avoids potential Tailwind `group-hover` conflicts with complex transforms, allows for sophisticated CSS animations.
*   **Avoid Frameworks:** Do not introduce complex JS frameworks without discussion.
*   **Minimalism:** Prefer server-side rendering and standard HTML/CSS solutions where possible.

---