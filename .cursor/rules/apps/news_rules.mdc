---
description: 
globs: apps/news/**/*.py,templates/news/**/*.html
alwaysApply: false
---
---
description: Conventions specific to the News app (Internal Blog & External API).
globs: apps/news/**/*.py,templates/news/**/*.html
tags: app, news, blog, api, backend, frontend
---

# News App Conventions

These rules apply specifically to the `apps.news` Django application, covering both the internal **News/Blog** functionality (`NewsPost` model) and the **External NewsPost Submission API**. Complementary to general Django and frontend rules.

---

## Part 1: Internal News/Blog (`NewsPost` Model) - Web Interface

This section covers the models, views, and templates used for displaying news/blog posts managed via the Django admin.

### Model (`NewsPost`)

*   **Purpose:** Represents internal news/blog posts created and managed by site administrators, OR submitted via API.
*   **Fields:** `title`, `slug`, `featured_image`, `content`, `status` (Draft/Published), `published_at`, `created_at`, `updated_at`. No explicit `author`.
*   **Slug Generation:** Auto-generated from `title` via `save()`, ensures uniqueness.
*   **Status Workflow:** Posts usually start as `'draft'`. API submissions default to `'draft'`. Changing status to `'published'` in Admin automatically sets `published_at`.
*   **Ordering:** Default ordering is by `-published_at`, then `-created_at`.

### Admin (`NewsPostAdmin`)

*   Standard admin configuration (`list_display`, `list_filter`, etc.).
*   Allows direct creation/editing/publishing of `NewsPost` items.

### Views (Standard Web Views)

*   **CBVs Preferred:** Use `NewsPostListView` and `NewsPostDetailView`.
*   **Filtering:** Public views MUST filter querysets to only include `status='published'`.

### URLs (Standard Web URLs)

*   Use `news` namespace.
*   `name='news_list'` (`/news/`).
*   `name='news_detail'` (`/news/<slug>/`).

### Templates

*   Located in `templates/news/`.
*   Use `_news_card.html` partial.
*   Use `partials/_pagination.html`.
*   Detail view (`news_detail.html`) uses Tailwind `prose`.

### Content

*   `content` field uses `CKEditor5Field`.

### Integration

*   `HomePageView` displays latest published posts.

---

## Part 2: External NewsPost Submission API

This section covers the components specifically designed for receiving `NewsPost` items from an external, authenticated AI agent via a REST API.

### Model (`NewsPost`)

*   Uses the same `NewsPost` model as Part 1.
*   API submissions default to `status='draft'`.
*   No author association needed.
*   Slug generated automatically.

### Serializer (`NewsPostCreateSerializer`)

*   **Purpose:** Handles serialization/deserialization of `NewsPost` data for API creation.
*   **Model:** Based on `NewsPost`.
*   **Fields:** Expects only `title`, `content`, and optionally `featured_image`.
*   **Slug/Status/Author:** Does not expect/require `slug`, `status`, or `author` in input. Handled by model defaults/`save()` method.

### API Views (`NewsPostCreateAPIView`)

*   **Purpose:** Endpoint for external agents to `POST` new `NewsPost` items (as drafts).
*   **Base Class:** `generics.CreateAPIView`.
*   **Authentication:** **MUST** use `JWTAuthentication`.
*   **Permissions:** **MUST** use `permissions.IsAuthenticated` AND `IsNewsAgent` (checks for group membership).
*   **Rate Limiting:** Uses default DRF throttle settings.
*   **Serializer:** Uses `NewsPostCreateSerializer`.

### API URLs

*   Located within `apps/news/urls.py`.
*   Uses the pattern `/api/news-posts/create/` relative to the `news` app's included path (e.g., `/news/api/news-posts/create/`).
*   Uses `name='api_newspost_create'`.

--- 