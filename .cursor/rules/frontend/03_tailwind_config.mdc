---
description: 
globs: templates/**/*.html,tailwind.config.js,static/css/input.css
alwaysApply: false
---
---
description: Rules and conventions for using Tailwind CSS in this project.
globs: templates/**/*.html,tailwind.config.js,static/css/input.css
tags: frontend, css, tailwind, style
---

# Tailwind CSS Configuration & Usage Rules

This document outlines specific configuration details and usage conventions for Tailwind CSS within the ArchViz Platform project.

## Configuration Files

*   **Main Config:** @file:tailwind.config.js - Defines theme customizations (colors, fonts, spacing), plugins, and content paths.
*   **PostCSS Config:** @file:postcss.config.js - Configures PostCSS plugins used by Tailwind (like `autoprefixer`).
*   **Entry Point CSS:** @file:static/css/main.css - Main CSS entry point, imports base variables, Tailwind directives, component styles, etc.
*   **Base Variables:** @file:static/css/base/variables.css - Centralized CSS custom properties for layout, colors, animations.
*   **Tailwind Directives:** @file:static/css/base/tailwind_directives.css - Contains Tailwind's base directives (`@tailwind base;`, `@tailwind components;`, `@tailwind utilities;`).
*   **Component CSS:** Files within @file:static/css/components/ (e.g., `our_services_card.css`) define styles and animations for specific components.
*   **Output CSS:** @file:static/css/output.css - The compiled CSS file linked in templates (Git-ignored).

## Key Conventions

*   **Utility-First:** Primarily use Tailwind's utility classes directly in HTML templates.
*   **Theme Customization:** Leverage the `theme` object in `tailwind.config.js` for consistent spacing, colors, fonts, etc., rather than arbitrary values.
*   **Avoid Custom CSS (in main.css):** Minimize writing extensive custom CSS directly in `main.css`. Prefer configuring Tailwind, using utility classes, or defining component-specific styles/animations in dedicated files within @file:static/css/components/.
*   **Purging:** Ensure `content` paths in `tailwind.config.js` correctly cover all template files to allow for effective purging of unused styles in production builds.

## Plugins Used

*   **`@tailwindcss/aspect-ratio`:** Used for maintaining aspect ratios, particularly for embeds. Enable this in `tailwind.config.js` under `plugins`. Example classes: `aspect-w-16`, `aspect-h-9`.
*   *(Add other plugins here if used, e.g., `@tailwindcss/forms`, `@tailwindcss/typography`)*

## Build Process

*   Use the `npm run build:css` script defined in @file:package.json to compile @file:static/css/main.css to `output.css` during development or for production builds. 