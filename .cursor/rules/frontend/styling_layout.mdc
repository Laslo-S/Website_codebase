---
description: 
globs: static/js/**/*.js,templates/**/*.html,static/css/**.css
alwaysApply: false
---
---
description: 
globs: static/js/**/*.js,templates/**/*.html,static/css/**.css
alwaysApply: false
---
---
description: 
globs: static/js/**/*.js,templates/**/*.html,static/css/**.css
alwaysApply: false
---
---
description: Rules for frontend layout, styling (CSS), and client-side scripting (JS).
globs: ["templates/**/*.html", "static/css/**/*.css", "static/js/**/*.js"]
tags: ["frontend", "css", "javascript", "html", "layout", "style"]
---

# Frontend Styling & Layout Rules

These rules govern the structure and presentation of the frontend components. They complement the Django-specific rules (@file:.cursor/rules/backend/django_rules.mdc) and the core protocol (@file:.cursor/rules/00_core_assistant_protocol.mdc).

## 1. HTML Structure & Layout

*   **Base Layout:** All pages MUST extend the base template: @file:templates/base.html.
*   **Semantic HTML:** Use appropriate HTML5 semantic tags (`<header>`, `<nav>`, `<main>`, `<article>`, `<aside>`, `<footer>`, etc.) to structure content logically.
*   **Accessibility:** Keep accessibility (ARIA attributes, semantic structure) in mind, although detailed rules may be added later.

## 2. CSS Styling

*   **Initial Approach:** Use plain CSS in @file:static/css/style.css.
*   **Future Framework:** We anticipate potentially using a utility-first framework like **Tailwind CSS** later for more efficient styling. If/when adopted, specific rules for Tailwind will be added here.
*   **Naming Convention (if not using Tailwind):** If writing custom CSS, strongly consider using the **BEM (Block, Element, Modifier)** naming convention (e.g., `.card__title--highlighted`) for clarity and maintainability until a framework is chosen.

## 3. Client-Side Scripting (JavaScript)

*   **Initial Approach:** Write **vanilla JavaScript** in @file:static/js/script.js for any necessary basic interactions.
*   **Avoid Frameworks Initially:** Do not introduce complex JS frameworks (React, Vue, etc.) or heavy libraries (like jQuery) without explicit discussion and agreement based on feature requirements.
*   **Minimalism:** Only add JavaScript when essential for user experience; prefer server-side rendering and standard HTML/CSS solutions where possible.

--- 