---
description: Current active tasks list
globs: 
alwaysApply: false
---
---
description: Current active tasks list
globs: 
alwaysApply: false
---

# TASKS: Architectural Visualization Platform Build

**Note:** Tasks for Phases 1 through 17 have been completed and archived in @file:docs/archived_tasks_phase_1_to_17.md.
This file contains tasks starting from Phase 18.

**AI Assistant Guidance:** Please follow these tasks sequentially, adhering to all guidelines in @file:.cursor/rules/00_core_assistant_protocol.mdc and any technology-specific rules referenced or created. Await confirmation before proceeding to the next numbered task. Refer to the memory bank (@file:memory-bank/*) for project context.

---

**Phase 18: Refine CSS Structure & Centralize Theme/Layout Variables**

*AI Assistant Guidance: Reorganize CSS files for maintainability. Move ALL CSS custom properties from `base.html` into a dedicated `variables.css`. Implement a `.layout-container` utility class driven by CSS variables. Update Tailwind config and build process. Refactor templates to use the new container class.*

- [x] **18.1 Define New CSS Directory Structure:**
    *   [x] **18.1.1 Finalize Structure Plan:**
    *   [x] **18.1.2 Define Import Order in `main.css`:**

- [x] **18.2 Implement New CSS Structure & Migrate:**
    *   [x] **18.2.1 Create Directories:**
    *   [x] **18.2.2 Create `main.css`:**
    *   [x] **18.2.3 Create & Populate `variables.css`:**
    *   [x] **18.2.4 Create & Populate `tailwind_directives.css`:**
    *   [x] **18.2.5 Create & Populate `gallery.css`:**
    *   [x] **18.2.6 Create & Populate `helpers.css`:**
    *   [x] **18.2.7 Create Empty `typography.css`:**
    *   [x] **18.2.8 Delete Old Files:**
    *   [x] **18.2.9 Remove Inline Style Block:**
    *   [x] **18.2.10 Update `.gitignore`:**

- [x] **18.3 Implement Centralized Layout Control:**
    *   [x] **18.3.1 Define Layout Variables:**
    *   [x] **18.3.2 Define `.layout-container` Class:**

- [x] **18.4 Update Build Process & Tailwind Config:**
    *   [x] **18.4.1 Update `package.json` Scripts:**
    *   [x] **18.4.2 Verify `tailwind.config.js`:**
    *   [x] **18.4.3 Re-run `npm install` (If needed):**

- [x] **18.5 Refactor Templates to Use Layout Container:**
    *   [x] **18.5.1 Identify Containers:**
    *   [x] **18.5.2 Replace with Class:**
    *   [x] **18.5.3 Verify Header/Footer:**

- [x] **18.6 Build, Verify & Document:**
    *   [x] **18.6.1 Run `npm run build:css`:**
    *   [x] **18.6.2 Run Dev Server & Test:**
    *   [x] **18.6.3 Update Memory Bank & Rules:**

- [x] **18.7 Version Control Checkpoint:**

---

**Phase 19: Consolidate Templates & Refine CSS Structure**

**Objective:** Streamline template partials. Keep existing CSS structure (from end of Phase 17 / reverted state).

**Tasks:**

- [x] **19.1 Consolidate Template Partials**
    - [x] **19.1.1 Investigate `_project_card.html` Usage:**
        - Read `templates/core/_project_card.html`.
        - Read `templates/core/partials/_project_card.html`.
        - Read `templates/core/_project_list_base.html`, `project_list_scans.html`, `project_list_stills.html`, `project_list_videos.html`, `home.html` to identify which `_project_card.html` path is included and the context variable used (`project` or `item`).
    - [x] **19.1.2 Consolidate `_project_card.html`:**
        - Determined `templates/core/partials/_project_card.html` is canonical.
        - Verified includes in list views use correct path and variable (`item`).
        - Deleted redundant `templates/core/_project_card.html`.
    - [x] **19.1.3 Investigate & Consolidate `_news_card.html`:**
        - Read `templates/partials/_news_card.html`.
        - Read `templates/news/_news_card.html`.
        - Read `templates/news/news_list.html` and `templates/core/home.html`.
        - Determined two distinct partials are needed.
        - Created `templates/news/partials/` directory.
        - Moved `news/_news_card.html` -> `news/partials/_news_card.html`.
        - Moved `partials/_news_card.html` -> `news/partials/_news_card_home.html`.
        - Updated includes in `news_list.html` and `home.html`.
        - Deleted original redundant files.
    - [x] **19.1.4 Verify Other Partials:** Reviewed partials in `templates/partials/` and `templates/accounts/partials/`. Confirmed locations are appropriate.
    - [x] **19.1.5 Test Template Rendering:** Verified pages using consolidated partials render correctly.

- [-] **19.2 Define New CSS Directory Structure:** (Skipped - Keeping existing structure)
    - [-] **19.2.1 Finalize Structure Plan:**
    - [-] **19.2.2 Define Import Order in `main.css`:**

- [-] **19.3 Implement New CSS Structure & Migrate:** (Skipped - Keeping existing structure)
    *   [-] **19.3.1 Create Directories:**
    *   [-] **19.3.2 Create `main.css`:**
    *   [-] **19.3.3 Create & Populate `variables.css`:**
    *   [-] **19.3.4 Create & Populate `tailwind_directives.css`:**
    *   [-] **19.3.5 Create & Populate `gallery.css`:**
    *   [-] **19.3.6 Create & Populate `helpers.css`:**
    *   [-] **19.3.7 Create Empty `typography.css`:**
    *   [-] **19.3.8 Delete Old Files:**
    *   [-] **19.3.9 Remove Inline Style Block:**
    *   [-] **19.3.10 Update `.gitignore`:**

- [-] **19.4 Implement Centralized Layout Control:** (Skipped - Keeping existing structure)
    *   [-] **19.4.1 Define Layout Variables:**
    *   [-] **19.4.2 Define `.layout-container` Class:**

- [-] **19.5 Update Build Process & Tailwind Config:** (Skipped - Keeping existing structure)
    *   [-] **19.5.1 Update `package.json` Scripts:**
    *   [-] **19.5.2 Verify `tailwind.config.js`:**
    *   [-] **19.5.3 Re-run `npm install`:**

- [-] **19.6 Refactor Templates to Use Layout Container:** (Skipped - Keeping existing structure)
    *   [-] **19.6.1 Identify & Replace:**

- [-] **19.7 Build, Verify & Document:** (Skipped - CSS structure unchanged)
    *   [-] **19.7.1 Run `npm run build:css`:**
    *   [-] **19.7.2 Run Dev Server & Test:**
    *   [-] **19.7.3 Update Memory Bank & Rules:** (No major structure change to document for CSS)

- [ ] **19.8 Version Control Checkpoint:** Stage changes (template consolidation only). Propose commit message (e.g., "refactor(frontend): Consolidate template partials for project and news cards"). Await confirmation.

---

**Phase 20: Document Project Structure**

**Objective:** Systematically explore the current project file and directory structure, document it in a dedicated memory bank file, remove the redundant structure section from `system_patterns.md`, and create a rule to enforce future updates.

**Method:** Use `list_dir` recursively for comprehensive listing. Read key representative files within each section to understand purpose. Document findings incrementally.

**Tasks:**

- [ ] **20.1 Explore & Summarize Root Directory:**
    *   [ ] List contents of the workspace root (`/`).
    *   [ ] Read key files (`manage.py`, `.gitignore`, `.env.example`, `README.md` (if exists), `requirements.txt`, `package.json`, `tailwind.config.js`, etc.).
    *   [ ] Summarize the purpose of root files and top-level directories.

- [ ] **20.2 Explore & Summarize `.cursor/` Directory:**
    *   [ ] List contents of `.cursor/`.
    *   [ ] List contents of `.cursor/rules/` and its subdirectories (`core`, `frontend`, etc.).
    *   [ ] Read key rule files (`core/00_core_assistant_protocol.mdc`, `core/01_memory_bank_protocol.mdc`) to confirm understanding.
    *   [ ] Summarize the purpose of the `.cursor` directory and its rule structure.

- [ ] **20.3 Explore & Summarize `apps/` Directory:**
    *   [ ] List contents of `apps/`.
    *   [ ] For each app (`core`, `accounts`, `news`, `slideshow`, etc.):
        *   [ ] List contents of `apps/<app_name>/`.
        *   [ ] Read key files (`models.py`, `views.py`, `urls.py`, `admin.py`, `apps.py`, representative templates in `apps/<app_name>/templates/`).
        *   [ ] Summarize the primary responsibility of the app.
    *   [ ] Summarize the overall structure and purpose of the `apps/` directory.

- [ ] **20.4 Explore & Summarize `config/` Directory:**
    *   [ ] List contents of `config/`.
    *   [ ] Read key files (`settings.py`, `urls.py`, `wsgi.py`, `asgi.py`).
    *   [ ] Summarize the purpose of the `config` directory and its files.

- [ ] **20.5 Explore & Summarize `memory-bank/` Directory:**
    *   [ ] List contents of `memory-bank/`.
    *   [ ] Briefly review filenames to confirm purpose (no deep read needed unless structure is unclear).
    *   [ ] Summarize the purpose of the `memory-bank` directory.

- [ ] **20.6 Explore & Summarize `static/` Directory:**
    *   [ ] List contents of `static/`.
    *   [ ] List contents of `static/css/` (and subdirectories like `components`). Read `main.css`.
    *   [ ] List contents of `static/js/`. Read key representative JS files (`css_gallery_init.js`, etc.).
    *   [ ] List contents of `static/images/` (if exists).
    *   [ ] List contents of `static/lottie/`.
    *   [ ] Summarize the organization and purpose of static assets.

- [ ] **20.7 Explore & Summarize `templates/` Directory:**
    *   [ ] List contents of `templates/` (root level).
    *   [ ] Read `templates/base.html`.
    *   [ ] List contents of `templates/partials/`. Read a few representative partials.
    *   [ ] List contents of `templates/registration/`.
    *   [ ] List contents of `templates/admin/`.
    *   [ ] List contents of app-specific template directories already covered in 20.3 (`templates/core/`, `templates/news/`, `templates/accounts/`). List partials dirs (`templates/news/partials/`, `templates/accounts/partials/`).
    *   [ ] Summarize the template organization strategy.

- [ ] **20.8 Explore & Summarize Other Root Items:**
    *   [ ] List any remaining root-level items not covered (e.g., `media/` if present, `.venv/`, `node_modules/`, database file).
    *   [ ] Summarize their purpose (often standard project components or generated directories).

- [ ] **20.9 Create `project_structure.mdc`:**
    *   [ ] Create the file `memory-bank/project_structure.mdc`.
    *   [ ] Consolidate the summaries from steps 20.1-20.8 into a clear structure within this file. Use markdown lists or code blocks to represent the tree. Add brief descriptions for key directories/files.

- [ ] **20.10 Update `system_patterns.mdc`:**
    *   [ ] Read `memory-bank/system_patterns.mdc`.
    *   [ ] Remove the entire "Directory Structure Conventions" section.
    *   [ ] Add a sentence under a relevant heading (e.g., Core Architecture or create a new one) referencing the new documentation: "For a detailed view of the project directory layout, see @file:memory-bank/project_structure.mdc."

- [ ] **20.11 Create Structure Maintenance Rule:**
    *   [ ] Create a new rule file: `.cursor/rules/core/02_project_structure_maintenance.mdc`.
    *   [ ] Add rule content mandating that `memory-bank/project_structure.mdc` MUST be updated whenever significant changes are made to the project's directory or key file structure (e.g., adding/removing apps, static/template directories, key config files).

- [ ] **20.12 Final Verification & Commit:**
    *   [ ] Briefly review `project_structure.mdc`, the modified `system_patterns.mdc`, and the new rule file for accuracy and clarity.
    *   [ ] Stage relevant changes (`memory-bank/`, `.cursor/rules/`).
    *   [ ] Propose commit message (e.g., "docs: Add project structure documentation and maintenance rule"). Await confirmation.

---

*End of currently defined tasks.*