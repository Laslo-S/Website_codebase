---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---
 # TASKS: Architectural Visualization Platform Build

**Project Goal:** Build a website to showcase architectural visualizations (3D scans, photogrammetry, AI imagery) using static embeds (Sketchfab, Vimeo) and image galleries. Plan for minimal client authentication later and potential future AI features (blog, chatbot). Low initial traffic expected.

**AI Assistant Guidance:** Please follow these tasks sequentially, adhering to all guidelines in @file:.cursor/rules/00_core_assistant_protocol.mdc and any technology-specific rules referenced or created. Await confirmation before proceeding to the next numbered task.

---

**Phase 1: Foundation & Backend Setup**

- [X] **1.1 Environment Verification:** (User confirmed completed) Confirm necessary tools (Python 3.x, pip, Node.js LTS, npm, Git) are installed and report versions.
- [X] **1.2 Backend Framework Decision & Scaffolding:**
    - [X] **1.2.1 Recommendation:** Based on project goals and reviewed blueprints, recommend **either Django or Node.js/Express**. Justify the choice referencing built-in features (auth, admin), development speed, security, maintainability, and suitability for potential AI integration. Reference @file:.cursor/rules/00_core_assistant_protocol.mdc.
    - [X] **1.2.2 Confirmation:** Await user confirmation.
    - [X] **1.2.3 Scaffolding:** Upon confirmation:
        - Scaffold the chosen framework's project structure (e.g., `django-admin startproject config .` & `python manage.py startapp core` potentially in an `apps/` dir for Django; standard Express setup for Node).
        - Use the activated `.venv` for Python package installs (`pip install ...`).
        - Create/update `requirements.txt` or `package.json` with core dependencies.
        - Report created files/folders.
- [X] **1.3 Configure Core Settings & Environment:**
    - [X] **1.3.1 Env Package:** Install and configure environment variable loading (`django-environ` or `dotenv`). Update @file:.gitignore if needed.
    - [X] **1.3.2 `.env.example` Check:** Ensure @file:.env.example contains placeholders for `SECRET_KEY`, `DEBUG=True`, `DATABASE_URL=sqlite:///db.sqlite3`.
    - [X] **1.3.3 Framework Settings:** Configure the main settings file (`config/settings/base.py` or similar) to load these variables. Set `DEBUG` and `ALLOWED_HOSTS` (`['localhost', '127.0.0.1']` for dev).
    - [X] **1.3.4 Database:** Configure the framework for SQLite dev database. Run initial migrations (e.g., `python manage.py migrate`). Verify success.
- [X] **1.4 Create Foundational Framework Rules:**
    - [X] **1.4.1 Create Rule File:** Create a *new* rule file in the appropriate subfolder, e.g., `.cursor/rules/backend/django_rules.mdc` or `.cursor/rules/backend/node_express_rules.mdc`.
    - [X] **1.4.2 Populate Basic Rules:** Add foundational rules to this *new file*, including:
        - Preferred project structure (e.g., Django apps in `apps/`, Node modules).
        - Naming conventions (files, variables, classes).
        - View/Controller patterns (e.g., Class-Based Views vs Functions).
        - Basic framework-specific security reminders (CSRF, input validation).
        - **Include a simple code example** demonstrating the preferred style (e.g., a basic Django view or Express route handler).
    - [X] **1.4.3 Reference Core Protocol:** Ensure this new rule file implicitly uses the core protocol (or add `@file:.cursor/rules/00_core_assistant_protocol.mdc` if needed, though broad globs might cover it).
- [X] **1.5 Version Control Checkpoint:** Add all new/modified files (framework code, `.env.example` updates, new rule file) to Git staging. Generate a Conventional Commit message (e.g., "feat: Scaffold [Django/Node] backend, configure settings, add initial framework rules"). Await user confirmation to commit.

---

**Phase 2: Foundational Frontend Layout & Structure (Mobile-First)**

*AI Assistant Guidance: This phase establishes the core HTML structure and basic frontend configuration, guided by mobile-first principles and insights from design blueprints. Styling will be minimal; focus is on structure and semantics.*

- [X] **2.1 Frontend Approach Decision & Validation:**
    - [X] **2.1.1 Recommendation:** Based on the goal of displaying embedded content simply and efficiently, confirm that **Server-Side Rendering (SSR) using the backend framework's templating engine** (e.g., Django Templates) is the most suitable initial approach. Justify why a complex SPA framework is not needed now. Reference mobile-first best practices.
    - [X] **2.1.2 Confirmation:** Await user confirmation.
- [X] **2.2 Scaffold Core Frontend Directories & Files:**
    - [X] **2.2.1 Create Directories:** Ensure the following standard directories exist: `templates/` (with a subdirectory for the core app, e.g., `templates/core/`), `static/`, `static/css/`, `static/js/`, `static/images/`.
    - [X] **2.2.2 Create Base Files:** Create:
        - `templates/base.html` (with HTML5 boilerplate, viewport meta tag for responsiveness).
        - `templates/core/home.html` (initially empty or just extending base).
        - `static/css/style.css` (empty or with basic resets/body styles).
        - `static/js/script.js` (empty).
- [X] **2.3 Implement Core Semantic Layout (`templates/base.html`):**
    - [X] **2.3.1 Structure:** Implement the main page structure within `<body>` using semantic HTML5 elements:
        - `<header>`: Placeholder for logo and main navigation.
        - `<main>`: Primary content area. Include a content block placeholder (e.g., `{% block content %}{% endblock %}` for Django). Structure inner divs anticipating a simple grid/column layout later.
        - `<footer>`: Placeholder for copyright and secondary links.
    - [X] **2.3.2 Mobile-First:** Ensure the structure is inherently mobile-friendly (e.g., linear flow, no fixed widths initially).
    - [X] **2.3.3 Accessibility:** Use appropriate landmarks (`<nav>` within header, etc.).
- [X] **2.4 Configure Static & Template File Serving:**
    - [X] **2.4.1 Settings:** Configure the backend framework's settings (`settings.py` or equivalent) to correctly locate the `templates/` directory and the `static/` directory (`STATIC_URL`, `STATICFILES_DIRS`).
    - [X] **2.4.2 Verification:** Briefly test if the development server can find and potentially serve `style.css` (even if empty) when linked from `base.html`. Report success or configuration needed.
- [X] **2.5 Create Foundational Frontend Rules:**
    - [X] **2.5.1 Create Rule File:** Create a *new* rule file: `.cursor/rules/frontend/01_layout_styling_base.mdc`.
    - [X] **2.5.2 Populate Basic Rules:** Add foundational rules to this file, referencing the design blueprints:
        - **Guideline:** Enforce **Mobile-First** design approach for all layouts and CSS.
        - **Guideline:** Mandate use of **semantic HTML5** elements (`header`, `nav`, `main`, `footer`, `section`, `article`).
        - **Guideline:** Specify basic CSS structure (e.g., recommend CSS resets, basic `box-sizing: border-box;`).
        - **Guideline:** Note preference for CSS Grid/Flexbox for layout (to be detailed later).
        - **Guideline:** Include placeholder for typography rules (font stack, base size - e.g., 16px).
        - **Guideline:** Reference @file:templates/base.html as the core layout structure.
        - **Example:** Include a small HTML snippet showing correct semantic structure for the header/main/footer.
- [X] **2.6 Version Control Checkpoint:** Stage all new/modified frontend files (templates, static files, settings changes) and the new frontend rule file. Generate a Conventional Commit message (e.g., "feat: Establish mobile-first frontend structure, base layout, static files config, and layout rules"). Await user confirmation to commit.

---

**Phase 3: Implement Homepage Content & Structure**

*AI Assistant Guidance: This phase focuses on structuring the homepage (`home.html`) and embedding the core placeholder content (3D models, videos, images). Apply semantic HTML and basic accessibility principles based on @file:.cursor/rules/frontend/01_layout_styling_base.mdc. Reference design blueprint concepts like Hero sections and F/Z patterns for logical placement.*

- [X] **3.1 Homepage Route & View Setup:** 
    - [X] **3.1.1 Create URL:** Ensure a URL pattern for the root path (`/`) exists in `apps/core/urls.py` (or the relevant app's `urls.py`) and that it's included in the main `config/urls.py`.
    - [X] **3.1.2 Create View:** Implement the corresponding view function/class (e.g., `HomePageView` in `apps/core/views.py`) that renders the `templates/core/home.html` template, ensuring it extends `templates/base.html`. Pass a basic page title in the context.
    - [X] **3.1.3 Verify Basic Rendering:** Run the dev server. Access the homepage (`/`). Confirm the base layout (Header/Footer from `base.html`) renders without errors, even with an empty content block. Report success or errors.
- [X] **3.2 Structure Homepage Content Area (`templates/core/home.html`):**
    - [X] **3.2.1 Define Sections:** Within the `{% block content %}` of `home.html`, create primary content sections using semantic tags, considering a typical landing page flow (e.g., Hero, Portfolio/Gallery).
    - [X] **3.2.2 Placement Logic:** Briefly explain placement choices based on F/Z patterns.
- [X] **3.3 Embed Sketchfab Model:**
    - [X] **3.3.1 Add Embed Code:** In the `#hero` section, insert the placeholder Sketchfab `<iframe>` embed code.
    - [X] **3.3.2 Accessibility:** Add a descriptive `title` attribute to the `<iframe>`.
- [X] **3.4 Embed Vimeo Video:**
    - [X] **3.4.1 Add Embed Code:** In an appropriate section, insert the placeholder Vimeo `<iframe>` embed code.
    - [X] **3.4.2 Accessibility:** Add a descriptive `title` attribute to the `<iframe>`.
    - [X] **3.4.3 Responsiveness (Basic):** Wrap the iframe in a `div` container and note the need for responsive CSS.
- [X] **3.5 Implement Static Image Gallery:**
    - [X] **3.5.1 Add Images:** Ensure 1-2 placeholder `.jpg` or `.png` images exist in `static/images/`.
    - [X] **3.5.2 Create HTML Structure:** In the `#image-gallery` section, implement the gallery using semantic HTML.
    - [X] **3.5.3 Display Images:** Use Django's `{% static %}` tag within `<img>` tags.
    - [X] **3.5.4 Accessibility:** Provide meaningful `alt` text for each `<img>` tag.
- [X] **3.6 Create Content Display Rules:**
    - [X] **3.6.1 Create Rule File:** Create a *new* rule file: `.cursor/rules/frontend/02_content_embeds.mdc`.
    - [X] **3.6.2 Populate Basic Rules:** Add rules to this file covering: `<iframe>` titles, `<img>` alt text, semantic structure for content blocks, placeholder for responsive embeds, placeholder for image optimization. Reference @file:.cursor/rules/frontend/01_layout_styling_base.mdc.
- [X] **3.7 Verification:**
    - [X] **3.7.1 Run Server:** Ensure dev server is running.
    - [X] **3.7.2 Check Homepage:** Access homepage (`/`). Verify layout structure, iframes appear, images display, alt/title attributes are present via inspection.
    - [X] **3.7.3 Report:** Confirm successful rendering and report any errors.
- [X] **3.8 Version Control Checkpoint:** Stage changes (views, urls, templates, static images, new rule file). Generate commit message (e.g., "feat: Implement homepage content structure with placeholders"). Await confirmation to commit.

---

**Phase 4: Initial Styling, Navigation & Auth Implementation**

*AI Assistant Guidance: This phase applies foundational styling using CSS (or optionally Tailwind CSS), makes navigation functional, and implements the Django authentication structure.*

- [X] **4.1 Styling Approach Decision:** (Tailwind chosen)
    - [X] **4.1.1 Recommendation:** Recommend **either** basic custom CSS using `static/css/style.css` **or** integrating **Tailwind CSS** now. Justify based on project simplicity vs. utility-first speed/consistency advantages highlighted in blueprints. Mention that Tailwind requires Node.js build steps.
    - [X] **4.1.2 Confirmation:** Await user confirmation.
- [X] **4.2 Basic Styling Implementation:**
    - [X] **4.2.1 CSS Setup:** (Skipped)
    - [X] **4.2.2 Tailwind Setup:**
        - [X] Integrate Tailwind: `tailwindcss`, `postcss`, `autoprefixer`, config files, `input.css`.
        - [X] Apply basic classes to `base.html`, `home.html`.
        - [X] Create `.cursor/rules/frontend/03_tailwind_config.mdc`.
- [X] **4.3 Implement Navigation:**
    - [X] **4.3.1 Create Placeholder Pages:** Create views, templates, and URLs for About/Contact.
    - [X] **4.3.2 Update Header:** Add links to About/Contact in `base.html` using `{% url %}`.
    - [X] **4.3.3 Verification:** Verify navigation links work.
- [X] **4.4 Prepare Authentication Structure:**
    - [X] **4.4.1 Create `accounts` App:** Create `apps/accounts` and add to `INSTALLED_APPS`.
    - [X] **4.4.2 Configure Auth URLs:** Include `apps.accounts.urls` and remove `django.contrib.auth.urls` from `config/urls.py` (handled within `apps.accounts.urls`).
    - [X] **4.4.3 Create Basic Auth Templates:** Create `templates/registration/login.html` and `templates/registration/logged_out.html`.
    - [X] **4.4.4 Create Auth Rules:** Create @file:.cursor/rules/auth_rules.mdc.
    - [X] **4.4.5 Verification:** Verify `/accounts/login/` loads.
- [X] **4.5 Create User Profile Page:**
    - [X] **4.5.1 Create Profile View:** Create `UserProfileView` in `apps/accounts/views.py` (requires login).
    - [X] **4.5.2 Create Profile URL:** Add `/profile/` URL in `apps/accounts/urls.py`.
    - [X] **4.5.3 Create Profile Template:** Create `templates/accounts/profile.html`.
    - [X] **4.5.4 Update Login Redirect URL:** Set `LOGIN_REDIRECT_URL = 'accounts:profile'` (initially).
- [X] **4.6 Customize Admin Header:**
    - [X] **4.6.1 Create Override Template:** Create `templates/admin/base_site.html`.
    - [X] **4.6.2 Override Header:** Modify `base_site.html` to change header text/link.
- [X] **4.7 Create User-Specific Pages (Initial):**
    - [X] **4.7.1 Create User Page View:** Add `UserPageView` to `apps/accounts/views.py`.
    - [X] **4.7.2 Create User Page URL Pattern:** Add `/user/<username>/` URL to `apps/accounts/urls.py`.
    - [X] **4.7.3 Create User Page Template:** Create `templates/accounts/user_page.html` (default).
- [X] **4.8 Implement Dynamic User Page Templates:**
    - [X] **4.8.1 Modify `UserPageView`:** Change `UserPageView` to use `get_template_names` to select `<username>.html` or fallback.
    - [X] **4.8.2 Create Example Template:** Create `templates/accounts/user_templates/test01.html`.
- [X] **4.9 Implement Dynamic Login Redirect:**
    - [X] **4.9.1 Create Custom Login View:** Add `CustomLoginView` inheriting `LoginView`, overriding `get_success_url`.
    - [X] **4.9.2 Update URL Patterns:** Use `CustomLoginView` for `/accounts/login/` in `apps/accounts/urls.py`. Define `logout` URL explicitly. Remove `django.contrib.auth.urls` include.
    - [X] **4.9.3 Remove `LOGIN_REDIRECT_URL`:** Remove the setting from `config/settings.py`.
    - [X] **4.9.4 Update Base Template URLs:** Fix `{% url %}` tags in `base.html` and `login.html` to use `accounts:login`/`accounts:logout`.
- [X] **4.10 Secure User-Specific Pages:**
    - [X] **4.10.1 Add Access Control:** Add `LoginRequiredMixin` and `dispatch` check to `UserPageView` to restrict access to owner or staff.
- [ ] **4.11 Version Control Checkpoint:** Stage all changes from Phase 4 (styling, templates, views, urls, settings updates, new rule files). Generate commit message (e.g., "feat: Implement Tailwind styling, navigation, auth structure, user pages, and admin customization"). Await user confirmation to commit.

---

**Phase 5: Database Models & Content Management**

*AI Assistant Guidance: This phase defines the core database models for the visualization content and integrates them with the Django admin for easy management.*

- [ ] **5.1 Define Core Models (`apps/core/models.py`):**
    - [ ] **5.1.1 `VisualizationType` Model:** Create a simple model (e.g., `name = CharField`) for categories like '3D Scan', 'Video Visualization', 'Still Image'.
    - [ ] **5.1.2 `VisualizationProject` Model:** Create the main model:
        - `title`: CharField
        - `description`: TextField
        - `type`: ForeignKey to `VisualizationType`
        - `embed_code`: TextField (for Sketchfab/Vimeo iframes)
        - `image`: ImageField (for still images, requires Pillow - add to requirements)
        - `slug`: SlugField (unique, for potential future detail URLs)
        - `created_at`/`updated_at`: DateTimeField (auto_now_add/auto_now)
        - `owner`: ForeignKey to `User` (link project to a user, **SET NULL** or **CASCADE** on delete? Decide & justify).
        - `is_public`: BooleanField (default True)
    - [ ] **5.1.3 Add String Representations:** Implement `__str__` methods for both models.
- [ ] **5.2 Configure Media File Handling:**
    - [ ] **5.2.1 Install Pillow:** Add `Pillow` to `requirements.txt` and install it.
    - [ ] **5.2.2 Configure Settings:** Define `MEDIA_URL = '/media/'` and `MEDIA_ROOT = BASE_DIR / 'media'` in `config/settings.py`.
    - [ ] **5.2.3 Update Project URLs:** In `config/urls.py`, add the pattern to serve media files during development: `urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)` (inside the `if settings.DEBUG:` block).
- [ ] **5.3 Database Migrations:**
    - [ ] **5.3.1 Make Migrations:** Run `python manage.py makemigrations core`.
    - [ ] **5.3.2 Migrate:** Run `python manage.py migrate`.
    - [ ] **5.3.3 Verification:** Check that migration files were created and the command reports success.
- [ ] **5.4 Register Models with Admin (`apps/core/admin.py`):**
    - [ ] **5.4.1 Basic Registration:** Register `VisualizationType` and `VisualizationProject` with the admin site (`admin.site.register(...)`).
    - [ ] **5.4.2 Enhance `VisualizationProjectAdmin`:** Create a `ModelAdmin` class for `VisualizationProject`:
        - Use `list_display` to show `title`, `type`, `owner`, `is_public`, `created_at`.
        - Use `list_filter` for `type`, `owner`, `is_public`.
        - Use `search_fields` for `title`, `description`.
        - Use `prepopulated_fields` to automatically generate the `slug` from the `title`.
        - Register the model using this custom admin class.
- [ ] **5.5 Verification:**
    - [ ] **5.5.1 Access Admin:** Log in to `/admin/`.
    - [ ] **5.5.2 Check Models:** Verify 'Visualization types' and 'Visualization projects' sections appear.
    - [ ] **5.5.3 Add Content:** Add a sample `VisualizationType` and a sample `VisualizationProject` (uploading a test image if possible).
    - [ ] **5.5.4 Check Admin Display:** Confirm the `list_display`, filters, search, and slug prepopulation work as configured.
- [ ] **5.6 Version Control Checkpoint:** Stage changes (models, admin, settings, migrations, requirements). Generate commit message (e.g., "feat: Define core models, configure media, and set up admin interface"). Await user confirmation to commit.

---

**(Further Phases: Displaying Content, User-Specific Content Views, Advanced Styling, Deployment)**

