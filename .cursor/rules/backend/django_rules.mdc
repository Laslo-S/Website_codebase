---
description: 
globs: apps/**/*.py,config/**/*.py
alwaysApply: false
---
---
description: Foundational rules and conventions for Django development in this project.
globs: apps/**/*.py", "config/**/*.py
tags: backend", "django", "style", "patterns", "security
---

# Django Development Rules & Conventions

This document outlines the standard practices for developing the Django backend for the Architectural Visualization Platform. Adhere to these rules alongside the core protocol (@file:.cursor/rules/00_core_assistant_protocol.mdc).

## 1. Project Structure

*   **Apps Location:** All custom Django apps MUST reside within the `apps/` directory at the project root.
*   **Configuration:** Project-level configuration (settings, main `urls.py`, `wsgi.py`, `asgi.py`) resides in the `config/` directory. Settings should be managed using `django-environ` loading from `.env`.
*   **Templates:** Place base templates in `templates/`. App-specific templates go in `apps/<app_name>/templates/<app_name>/`.
*   **Static Files:** Place base static files in `static/`. App-specific static files go in `apps/<app_name>/static/<app_name>/`.

## 2. Naming Conventions

*   **Apps:** Lowercase, underscore-separated if needed (e.g., `user_profiles`).
*   **Models:** Singular, CamelCase (e.g., `UserProfile`).
*   **Views:**
    *   **Class-Based Views (CBVs):** CamelCase, descriptive suffix (e.g., `HomePageView`, `ProjectDetailView`). **Prefer CBVs** for their structure and reusability, especially for standard CRUD operations.
    *   **Function-Based Views (FBVs):** Lowercase, underscore-separated (e.g., `contact_form_submit`). Use FBVs for simple, unique views or where CBVs add unnecessary complexity.
*   **Templates:** Lowercase, underscore-separated (e.g., `home_page.html`, `project_detail.html`).
*   **URLs:** Use kebab-case for URL paths (`/projects/my-cool-project/`) and underscore-separated names for `path(..., name='project_detail')`.
*   **Variables/Functions:** PEP 8 standard (lowercase, underscore-separated).

## 3. View Patterns

*   **Prefer Class-Based Views (CBVs):** Use Django's generic CBVs (`ListView`, `DetailView`, `CreateView`, `UpdateView`, `DeleteView`, `TemplateView`) whenever possible. They provide structure and reduce boilerplate.
*   **Function-Based Views (FBVs):** Suitable for simple views, processing forms that don't map directly to a model, or specific AJAX handlers.

## 4. Security Reminders

*   **CSRF Protection:** Ensure all POST forms use the `{% csrf_token %}` template tag. Django's middleware handles most checks, but be mindful.
*   **Input Validation:** Use Django Forms or Django REST Framework Serializers (if/when an API is added) to validate ALL incoming data before processing or saving. Never trust user input.
*   **Query Parameterization:** Use the Django ORM. Avoid raw SQL queries unless absolutely necessary and if so, ensure parameters are properly escaped.
*   **Permissions:** Use Django's permission framework (`@permission_required`, `LoginRequiredMixin`, etc.) to protect views appropriately.

## 5. Code Example (Simple CBV)

```python
# apps/core/views.py

from django.views.generic import TemplateView
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required # Example if login needed

# Simple view rendering a static template
class HomePageView(TemplateView):
    template_name = "core/home_page.html" # Corresponds to apps/core/templates/core/home_page.html

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['page_title'] = "Welcome to the Visualization Platform"
        # Add other context data as needed
        return context

# Example of protecting a view (if needed later)
# @method_decorator(login_required, name='dispatch')
# class ProtectedPageView(TemplateView):
#    template_name = "core/protected_page.html"

```

## 6. Dependencies

*   Add new dependencies to `requirements.txt` after installing via `pip`.
*   Justify adding significant new third-party packages.

--- 

# Django Specific Rules\n\n# Rule Description: Defines specific conventions and best practices for developing with Django in this project.\n# Based on: Core Backend Needs & Initial Scaffolding\n\n# --- Settings & Configuration ---\n\n# Guideline: Environment Variables\n# Use `django-environ` to load settings from `.env` file. Reference @file:.env.example.\n# Ensure `DEBUG`, `SECRET_KEY`, `DATABASE_URL`, `ALLOWED_HOSTS` are loaded from env.\n\n# Guideline: Installed Apps\n# Keep `INSTALLED_APPS` organized (Django apps, third-party, project apps).\n# Place project-specific apps in the `apps/` directory (e.g., `apps.core`, `apps.accounts`).\n\n# Guideline: Static & Media Files\n# Configure `STATIC_URL`, `STATICFILES_DIRS` (`static/` at root).\n# Configure `MEDIA_URL`, `MEDIA_ROOT` (`media/` at root).\n\n# --- Models (`models.py`) ---\n\n# Guideline: Model Naming\n# Use singular CamelCase names (e.g., `PublicPortfolioItem`, `ClientDeliverable`).\n\n# Guideline: Proxy Models\n# Use Proxy Models (e.g., `PublicScanItem`) inheriting from a base model (`PublicPortfolioItem`) to provide filtered admin views without altering the DB schema. Assign custom managers (`objects = PublicScanManager()`) to proxy models for automatic filtering.\n# Set `Meta.proxy = True` and customize `verbose_name_plural` (use prefixes like AA, AB, AC for desired admin sidebar ordering).\n\n# Guideline: Fields\n# Use appropriate field types. Add `db_index=True` to frequently queried fields.\n\n# Guideline: Relationships\n# Use `ForeignKey`, define `related_name` (e.g., `user.deliverables`).\n\n# Guideline: Meta Options\n# Set `verbose_name`, `verbose_name_plural`. Define `ordering`.\n\n# --- Views (`views.py`) ---\n\n# Guideline: View Types\n# Prefer Class-Based Views (CBVs) like `ListView`, `DetailView`, `TemplateView` for structure.\n# Use Function-Based Views (FBVs) for simple or highly custom logic.\n# Use Mixins (`LoginRequiredMixin`, `UserPassesTestMixin`) for access control.\n\n# Guideline: View Logic\n# Keep views focused. Business logic often belongs in models or utility functions.\n# Use `get_queryset()` or `get_context_data()` methods in CBVs for data retrieval/manipulation.\n# Use `get_object_or_404` for fetching single objects.\n\n# --- URLs (`urls.py`) ---\n\n# Guideline: URL Naming\n# **ALWAYS** use named URL patterns (`name=\'my_view_name\`).\n# Use namespaces for apps (`app_name = \'core\'`).\n\n# Guideline: Referencing URLs\n# Use `{% url \'namespace:name\' %}` in templates.\n# Use `reverse()` or `reverse_lazy()` in Python code (views, models).\n\n# --- Templates (`templates/`) ---\n\n# Guideline: Structure\n# Follow structure defined in @file:memory-bank/system_patterns.md.\n# Use `{% extends %}` and `{% block %}` for inheritance.\n# Use `{% include %}` for partials (@file:templates/partials/).\n\n# Guideline: Template Tags/Filters\n# Use built-in tags/filters (`{% static %}`, `{{ var|safe }}`, `{{ var|truncatewords:N }}`).\n# Create custom template tags/filters for reusable presentation logic if needed.\n\n# --- Admin (`admin.py`) ---\n\n# Guideline: Registration\n# Register proxy models (`PublicScanItem`) with custom admins inheriting from a base admin class (`PublicPortfolioItemAdmin`). **Do not register the base model itself if only proxy views are desired.**\n# Register standard models (`ClientDeliverable`) with their own `ModelAdmin` (`ClientDeliverableAdmin`).\n# For `User` model, unregister default and register custom admin: `admin.site.unregister(User)`, `admin.site.register(User, CustomUserAdmin)`.\n\n# Guideline: Customization\n# Use `list_display`, `search_fields`, `fieldsets`.\n# Use `prepopulated_fields` for slugs.\n# **Do NOT use `inlines` on `UserAdmin` for `ClientDeliverable`.** Use a separate admin view with filtering.\n\n# Guideline: Custom Filters\n# Create custom filters inheriting from `admin.SimpleListFilter` to provide tailored filtering logic (e.g., `ClientFilter` using `Group` membership). Use these in `list_filter` on the relevant `ModelAdmin`.\n\n# Guideline: App Names & Ordering\n# Set `verbose_name` in the app's `AppConfig` (`apps.py`) for user-friendly sidebar labels. Use alphabetical prefixes in proxy model `verbose_name_plural` to control sidebar model order.\n\n# --- General ---\n\n# Guideline: Security\n# Use Django\'s built-in protection (CSRF, XSS).\n# Sanitize external input (covered by ORM/templates generally).\n# Use appropriate permissions/access control (Mixins, custom permissions).\n\n# Guideline: PEP 8\n# Follow PEP 8 style guidelines for Python code.\n 