---
description: 
globs: templates/**/*.html,tailwind.config.js,static/css/input.css
alwaysApply: false
---
---
description: Rules and conventions for using Tailwind CSS in this project.
globs: templates/**/*.html,tailwind.config.js,static/css/input.css
tags: frontend, css, tailwind, style
---

# Tailwind CSS Configuration & Usage Rules

This document outlines specific configuration details and usage conventions for Tailwind CSS within the ArchViz Platform project.

## Configuration Files

*   **Main Config:** @file:tailwind.config.js - Defines theme customizations (colors, fonts, spacing), plugins, and content paths.
*   **PostCSS Config:** @file:postcss.config.js - Configures PostCSS plugins used by Tailwind (like `autoprefixer`).
*   **Input CSS:** @file:static/css/input.css - Contains Tailwind's base directives (`@tailwind base;`, `@tailwind components;`, `@tailwind utilities;`) and any custom CSS or `@layer` directives.
*   **Output CSS:** @file:static/css/output.css - The compiled CSS file linked in templates (Git-ignored if generated dynamically, but currently committed).

## Key Conventions

*   **Utility-First:** Primarily use Tailwind's utility classes directly in HTML templates.
*   **Theme Customization:** Leverage the `theme` object in `tailwind.config.js` for consistent spacing, colors, fonts, etc., rather than arbitrary values.
*   **Avoid Custom CSS:** Minimize writing custom CSS in `input.css`. Prefer configuring Tailwind or using utility classes.
*   **Purging:** Ensure `content` paths in `tailwind.config.js` correctly cover all template files to allow for effective purging of unused styles in production builds.

## Plugins Used

*   **`@tailwindcss/aspect-ratio`:** Used for maintaining aspect ratios, particularly for embeds. Enable this in `tailwind.config.js` under `plugins`. Example classes: `aspect-w-16`, `aspect-h-9`.
*   *(Add other plugins here if used, e.g., `@tailwindcss/forms`, `@tailwindcss/typography`)*

## Build Process

*   Use the `npm run build:css` script defined in @file:package.json to compile `input.css` to `output.css` during development or for production builds. 