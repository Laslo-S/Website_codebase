---
description: 
globs: static/js/**/*.js,templates/**/*.html,static/css/**.css
alwaysApply: false
---
---
description: 
globs: static/js/**/*.js,templates/**/*.html,static/css/**.css
alwaysApply: false
---
---
description: 
globs: static/js/**/*.js,templates/**/*.html,static/css/**.css
alwaysApply: false
---
---
description: Rules for frontend layout, styling (CSS), and client-side scripting (JS).
globs: ["templates/**/*.html", "static/css/**/*.css", "static/js/**/*.js"]
tags: ["frontend", "css", "javascript", "html", "layout", "style"]
---

# Frontend Styling & Layout Rules

These rules govern the structure and presentation of the frontend components. They complement the Django-specific rules (@file:.cursor/rules/backend/django_rules.mdc) and the core protocol (@file:.cursor/rules/00_core_assistant_protocol.mdc).

## 1. HTML Structure & Layout

*   **Base Layout:** All pages MUST extend the base template: @file:templates/base.html.
*   **Semantic HTML:** Use appropriate HTML5 semantic tags (`<header>`, `<nav>`, `<main>`, `<article>`, `<aside>`, `<footer>`, etc.) to structure content logically.
*   **Accessibility:** Keep accessibility (ARIA attributes, semantic structure) in mind, although detailed rules may be added later.

## 2. CSS Styling

*   **Framework:** We are using the **Tailwind CSS** utility-first framework for all styling.
*   **Configuration:** Tailwind is configured via @file:tailwind.config.js and @file:postcss.config.js. Refer to @file:.cursor/rules/frontend/03_tailwind_config.mdc for setup details.
*   **Build Process:** Styles are compiled from @file:static/css/input.css to @file:static/css/output.css using the `npm run build:css` command (or the watcher).
*   **Usage:** Apply utility classes directly within HTML templates (@glob:"templates/**/*.html"). Avoid writing extensive custom CSS files unless absolutely necessary for complex components not easily achievable with utilities.
*   **Consistency:** Adhere to the design system defined in `tailwind.config.js` (colors, spacing, fonts) for consistency.

## 3. Client-Side Scripting (JavaScript)

*   **Initial Approach:** Write **vanilla JavaScript** in @file:static/js/script.js for any necessary basic interactions (like the mobile menu toggle already implemented in `base.html`).
*   **Avoid Frameworks Initially:** Do not introduce complex JS frameworks (React, Vue, etc.) or heavy libraries (like jQuery) without explicit discussion and agreement based on feature requirements.
*   **Minimalism:** Only add JavaScript when essential for user experience; prefer server-side rendering and standard HTML/CSS solutions where possible.

--- 