---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---

 # TASKS: Architectural Visualization Platform Build

**Project Goal:** Build a website to showcase architectural visualizations (3D scans, photogrammetry, AI imagery) using static embeds (Sketchfab, Vimeo) and image galleries. Plan for minimal client authentication later and potential future AI features (blog, chatbot). Low initial traffic expected.

**AI Assistant Guidance:** Please follow these tasks sequentially, adhering to all guidelines in @file:.cursor/rules/00_core_assistant_protocol.mdc and any technology-specific rules referenced or created. Await confirmation before proceeding to the next numbered task.

---

**Phase 1: Foundation & Backend Setup**

- [X] **1.1 Environment Verification:** (User confirmed completed) Confirm necessary tools (Python 3.x, pip, Node.js LTS, npm, Git) are installed and report versions.
- [X] **1.2 Backend Framework Decision & Scaffolding:**
    - [X] **1.2.1 Recommendation:** Based on project goals and reviewed blueprints, recommend **either Django or Node.js/Express**. Justify the choice referencing built-in features (auth, admin), development speed, security, maintainability, and suitability for potential AI integration. Reference @file:.cursor/rules/00_core_assistant_protocol.mdc.
    - [X] **1.2.2 Confirmation:** Await user confirmation.
    - [X] **1.2.3 Scaffolding:** Upon confirmation:
        - Scaffold the chosen framework's project structure (e.g., `django-admin startproject config .` & `python manage.py startapp core` potentially in an `apps/` dir for Django; standard Express setup for Node).
        - Use the activated `.venv` for Python package installs (`pip install ...`).
        - Create/update `requirements.txt` or `package.json` with core dependencies.
        - Report created files/folders.
- [X] **1.3 Configure Core Settings & Environment:**
    - [X] **1.3.1 Env Package:** Install and configure environment variable loading (`django-environ` or `dotenv`). Update @file:.gitignore if needed.
    - [X] **1.3.2 `.env.example` Check:** Ensure @file:.env.example contains placeholders for `SECRET_KEY`, `DEBUG=True`, `DATABASE_URL=sqlite:///db.sqlite3`.
    - [X] **1.3.3 Framework Settings:** Configure the main settings file (`config/settings/base.py` or similar) to load these variables. Set `DEBUG` and `ALLOWED_HOSTS` (`['localhost', '127.0.0.1']` for dev).
    - [X] **1.3.4 Database:** Configure the framework for SQLite dev database. Run initial migrations (e.g., `python manage.py migrate`). Verify success.
- [X] **1.4 Create Foundational Framework Rules:**
    - [X] **1.4.1 Create Rule File:** Create a *new* rule file in the appropriate subfolder, e.g., `.cursor/rules/backend/django_rules.mdc` or `.cursor/rules/backend/node_express_rules.mdc`.
    - [X] **1.4.2 Populate Basic Rules:** Add foundational rules to this *new file*, including:
        - Preferred project structure (e.g., Django apps in `apps/`, Node modules).
        - Naming conventions (files, variables, classes).
        - View/Controller patterns (e.g., Class-Based Views vs Functions).
        - Basic framework-specific security reminders (CSRF, input validation).
        - **Include a simple code example** demonstrating the preferred style (e.g., a basic Django view or Express route handler).
    - [X] **1.4.3 Reference Core Protocol:** Ensure this new rule file implicitly uses the core protocol (or add `@file:.cursor/rules/00_core_assistant_protocol.mdc` if needed, though broad globs might cover it).
- [X] **1.5 Version Control Checkpoint:** Add all new/modified files (framework code, `.env.example` updates, new rule file) to Git staging. Generate a Conventional Commit message (e.g., "feat: Scaffold [Django/Node] backend, configure settings, add initial framework rules"). Await user confirmation to commit.

---

**Phase 2: Foundational Frontend Layout & Structure (Mobile-First)**

*AI Assistant Guidance: This phase establishes the core HTML structure and basic frontend configuration, guided by mobile-first principles and insights from design blueprints. Styling will be minimal; focus is on structure and semantics.*

- [X] **2.1 Frontend Approach Decision & Validation:**
    - [X] **2.1.1 Recommendation:** Based on the goal of displaying embedded content simply and efficiently, confirm that **Server-Side Rendering (SSR) using the backend framework's templating engine** (e.g., Django Templates) is the most suitable initial approach. Justify why a complex SPA framework is not needed now. Reference mobile-first best practices.
    - [X] **2.1.2 Confirmation:** Await user confirmation.
- [X] **2.2 Scaffold Core Frontend Directories & Files:**
    - [X] **2.2.1 Create Directories:** Ensure the following standard directories exist: `templates/` (with a subdirectory for the core app, e.g., `templates/core/`), `static/`, `static/css/`, `static/js/`, `static/images/`.
    - [X] **2.2.2 Create Base Files:** Create:
        - `templates/base.html` (with HTML5 boilerplate, viewport meta tag for responsiveness).
        - `templates/core/home.html` (initially empty or just extending base).
        - `static/css/style.css` (empty or with basic resets/body styles).
        - `static/js/script.js` (empty).
- [X] **2.3 Implement Core Semantic Layout (`templates/base.html`):**
    - [X] **2.3.1 Structure:** Implement the main page structure within `<body>` using semantic HTML5 elements:
        - `<header>`: Placeholder for logo and main navigation.
        - `<main>`: Primary content area. Include a content block placeholder (e.g., `{% block content %}{% endblock %}` for Django). Structure inner divs anticipating a simple grid/column layout later.
        - `<footer>`: Placeholder for copyright and secondary links.
    - [X] **2.3.2 Mobile-First:** Ensure the structure is inherently mobile-friendly (e.g., linear flow, no fixed widths initially).
    - [X] **2.3.3 Accessibility:** Use appropriate landmarks (`<nav>` within header, etc.).
- [X] **2.4 Configure Static & Template File Serving:**
    - [X] **2.4.1 Settings:** Configure the backend framework's settings (`settings.py` or equivalent) to correctly locate the `templates/` directory and the `static/` directory (`STATIC_URL`, `STATICFILES_DIRS`).
    - [X] **2.4.2 Verification:** Briefly test if the development server can find and potentially serve `style.css` (even if empty) when linked from `base.html`. Report success or configuration needed.
- [X] **2.5 Create Foundational Frontend Rules:**
    - [X] **2.5.1 Create Rule File:** Create a *new* rule file: `.cursor/rules/frontend/01_layout_styling_base.mdc`.
    - [X] **2.5.2 Populate Basic Rules:** Add foundational rules to this file, referencing the design blueprints:
        - **Guideline:** Enforce **Mobile-First** design approach for all layouts and CSS.
        - **Guideline:** Mandate use of **semantic HTML5** elements (`header`, `nav`, `main`, `footer`, `section`, `article`).
        - **Guideline:** Specify basic CSS structure (e.g., recommend CSS resets, basic `box-sizing: border-box;`).
        - **Guideline:** Note preference for CSS Grid/Flexbox for layout (to be detailed later).
        - **Guideline:** Include placeholder for typography rules (font stack, base size - e.g., 16px).
        - **Guideline:** Reference @file:templates/base.html as the core layout structure.
        - **Example:** Include a small HTML snippet showing correct semantic structure for the header/main/footer.
- [X] **2.6 Version Control Checkpoint:** Stage all new/modified frontend files (templates, static files, settings changes) and the new frontend rule file. Generate a Conventional Commit message (e.g., "feat: Establish mobile-first frontend structure, base layout, static files config, and layout rules"). Await user confirmation to commit.

---

**Phase 3: Implement Homepage Content & Structure**

*AI Assistant Guidance: This phase focuses on structuring the homepage (`home.html`) and embedding the core placeholder content (3D models, videos, images). Apply semantic HTML and basic accessibility principles based on @file:.cursor/rules/frontend/01_layout_styling_base.mdc. Reference design blueprint concepts like Hero sections and F/Z patterns for logical placement.*

- [X] **3.1 Homepage Route & View Setup:** 
    - [X] **3.1.1 Create URL:** Ensure a URL pattern for the root path (`/`) exists in `apps/core/urls.py` (or the relevant app's `urls.py`) and that it's included in the main `config/urls.py`.
    - [X] **3.1.2 Create View:** Implement the corresponding view function/class (e.g., `HomePageView` in `apps/core/views.py`) that renders the `templates/core/home.html` template, ensuring it extends `templates/base.html`. Pass a basic page title in the context.
    - [X] **3.1.3 Verify Basic Rendering:** Run the dev server. Access the homepage (`/`). Confirm the base layout (Header/Footer from `base.html`) renders without errors, even with an empty content block. Report success or errors.
- [X] **3.2 Structure Homepage Content Area (`templates/core/home.html`):**
    - [X] **3.2.1 Define Sections:** Within the `{% block content %}` of `home.html`, create primary content sections using semantic tags, considering a typical landing page flow (e.g., Hero, Portfolio/Gallery).
    - [X] **3.2.2 Placement Logic:** Briefly explain placement choices based on F/Z patterns.
- [X] **3.3 Embed Sketchfab Model:**
    - [X] **3.3.1 Add Embed Code:** In the `#hero` section, insert the placeholder Sketchfab `<iframe>` embed code.
    - [X] **3.3.2 Accessibility:** Add a descriptive `title` attribute to the `<iframe>`.
- [X] **3.4 Embed Vimeo Video:**
    - [X] **3.4.1 Add Embed Code:** In an appropriate section, insert the placeholder Vimeo `<iframe>` embed code.
    - [X] **3.4.2 Accessibility:** Add a descriptive `title` attribute to the `<iframe>`.
    - [X] **3.4.3 Responsiveness (Basic):** Wrap the iframe in a `div` container and note the need for responsive CSS.
- [X] **3.5 Implement Static Image Gallery:**
    - [X] **3.5.1 Add Images:** Ensure 1-2 placeholder `.jpg` or `.png` images exist in `static/images/`.
    - [X] **3.5.2 Create HTML Structure:** In the `#image-gallery` section, implement the gallery using semantic HTML.
    - [X] **3.5.3 Display Images:** Use Django's `{% static %}` tag within `<img>` tags.
    - [X] **3.5.4 Accessibility:** Provide meaningful `alt` text for each `<img>` tag.
- [X] **3.6 Create Content Display Rules:**
    - [X] **3.6.1 Create Rule File:** Create a *new* rule file: `.cursor/rules/frontend/02_content_embeds.mdc`.
    - [X] **3.6.2 Populate Basic Rules:** Add rules to this file covering: `<iframe>` titles, `<img>` alt text, semantic structure for content blocks, placeholder for responsive embeds, placeholder for image optimization. Reference @file:.cursor/rules/frontend/01_layout_styling_base.mdc.
- [X] **3.7 Verification:**
    - [X] **3.7.1 Run Server:** Ensure dev server is running.
    - [X] **3.7.2 Check Homepage:** Access homepage (`/`). Verify layout structure, iframes appear, images display, alt/title attributes are present via inspection.
    - [X] **3.7.3 Report:** Confirm successful rendering and report any errors.
- [X] **3.8 Version Control Checkpoint:** Stage changes (views, urls, templates, static images, new rule file). Generate commit message (e.g., "feat: Implement homepage content structure with placeholders"). Await confirmation to commit.

---

**Phase 4: Initial Styling, Navigation & Auth Implementation**

*AI Assistant Guidance: This phase applies foundational styling using CSS (or optionally Tailwind CSS), makes navigation functional, and implements the Django authentication structure.*

- [X] **4.1 Styling Approach Decision:** (Tailwind chosen)
    - [X] **4.1.1 Recommendation:** Recommend **either** basic custom CSS using `static/css/style.css` **or** integrating **Tailwind CSS** now. Justify based on project simplicity vs. utility-first speed/consistency advantages highlighted in blueprints. Mention that Tailwind requires Node.js build steps.
    - [X] **4.1.2 Confirmation:** Await user confirmation.
- [X] **4.2 Basic Styling Implementation:**
    - [X] **4.2.1 CSS Setup:** (Skipped)
    - [X] **4.2.2 Tailwind Setup:**
        - [X] Integrate Tailwind: `tailwindcss`, `postcss`, `autoprefixer`, config files, `input.css`.
        - [X] Apply basic classes to `base.html`, `home.html`.
        - [X] Create `.cursor/rules/frontend/03_tailwind_config.mdc`.
- [X] **4.3 Implement Navigation:**
    - [X] **4.3.1 Create Placeholder Pages:** Create views, templates, and URLs for About/Contact.
    - [X] **4.3.2 Update Header:** Add links to About/Contact in `base.html` using `{% url %}`.
    - [X] **4.3.3 Verification:** Verify navigation links work.
- [X] **4.4 Prepare Authentication Structure:**
    - [X] **4.4.1 Create `accounts` App:** Create `apps/accounts` and add to `INSTALLED_APPS`.
    - [X] **4.4.2 Configure Auth URLs:** Include `apps.accounts.urls` and remove `django.contrib.auth.urls` from `config/urls.py` (handled within `apps.accounts.urls`).
    - [X] **4.4.3 Create Basic Auth Templates:** Create `templates/registration/login.html` and `templates/registration/logged_out.html`.
    - [X] **4.4.4 Create Auth Rules:** Create @file:.cursor/rules/auth_rules.mdc.
    - [X] **4.4.5 Verification:** Verify `/accounts/login/` loads.
- [X] **4.5 Create User Profile Page:**
    - [X] **4.5.1 Create Profile View:** Create `UserProfileView` in `apps/accounts/views.py` (requires login).
    - [X] **4.5.2 Create Profile URL:** Add `/profile/` URL in `apps/accounts/urls.py`.
    - [X] **4.5.3 Create Profile Template:** Create `templates/accounts/profile.html`.
    - [X] **4.5.4 Update Login Redirect URL:** Set `LOGIN_REDIRECT_URL = 'accounts:profile'` (initially).
- [X] **4.6 Customize Admin Header:**
    - [X] **4.6.1 Create Override Template:** Create `templates/admin/base_site.html`.
    - [X] **4.6.2 Override Header:** Modify `base_site.html` to change header text/link.
- [X] **4.7 Create User-Specific Pages (Initial):**
    - [X] **4.7.1 Create User Page View:** Add `UserPageView` to `apps/accounts/views.py`.
    - [X] **4.7.2 Create User Page URL Pattern:** Add `/user/<username>/` URL to `apps/accounts/urls.py`.
    - [X] **4.7.3 Create User Page Template:** Create `templates/accounts/user_page.html` (default).
- [X] **4.8 Implement Dynamic User Page Templates:**
    - [X] **4.8.1 Modify `UserPageView`:** Change `UserPageView` to use `get_template_names` to select `<username>.html` or fallback.
    - [X] **4.8.2 Create Example Template:** Create `templates/accounts/user_templates/test01.html`.
- [X] **4.9 Implement Dynamic Login Redirect:**
    - [X] **4.9.1 Create Custom Login View:** Add `CustomLoginView` inheriting `LoginView`, overriding `get_success_url`.
    - [X] **4.9.2 Update URL Patterns:** Use `CustomLoginView` for `/accounts/login/` in `apps/accounts/urls.py`. Define `logout` URL explicitly. Remove `django.contrib.auth.urls` include.
    - [X] **4.9.3 Remove `LOGIN_REDIRECT_URL`:** Remove the setting from `config/settings.py`.
    - [X] **4.9.4 Update Base Template URLs:** Fix `{% url %}` tags in `base.html` and `login.html` to use `accounts:login`/`accounts:logout`.
- [X] **4.10 Secure User-Specific Pages:**
    - [X] **4.10.1 Add Access Control:** Add `LoginRequiredMixin` and `dispatch` check to `UserPageView` to restrict access to owner or staff.
- [X] **4.11 Version Control Checkpoint:** Staged and committed Phase 4 changes.

---

**Phase 5: Refactor Visualization Types & Display**

*AI Assistant Guidance: This phase refactors the project structure to use hardcoded visualization types with dedicated pages, removing the previous database model approach and updating associated views, templates, and navigation.*

- [X] **5.1 Modify Models for Hardcoded Types (`apps/core/models.py`):**
    - [X] **5.1.1 Remove `VisualizationType` Model:** Delete the `VisualizationType` model.
    - [X] **5.1.2 Update `VisualizationProject` Model:** Change the `type` field to `project_type` (CharField) with predefined choices (`scan`, `video`, `still`).
- [X] **5.2 Update Admin (`apps/core/admin.py`):**
    - [X] **5.2.1 Remove `VisualizationTypeAdmin`:** Delete the admin registration for the old model.
    - [X] **5.2.2 Update `VisualizationProjectAdmin`:** Modify list display, filters, and fieldsets to use `project_type`.
- [X] **5.3 Update Core Views (`apps/core/views.py`):**
    - [X] **5.3.1 Update `HomePageView`:** Remove the project query logic.
    - [X] **5.3.2 Add `BaseProjectListView`:** Create a base list view for common functionality.
    - [X] **5.3.3 Add Specific List Views:** Create `ScanListView`, `VideoListView`, `StillListView` inheriting from base and filtering by `project_type`.
- [X] **5.4 Update Core URLs (`apps/core/urls.py`):**
    - [X] **5.4.1 Add List View URLs:** Add URL patterns for `/scans/`, `/videos/`, `/images/` pointing to the new list views.
- [X] **5.5 Create List Page Templates (`templates/core/`):**
    - [X] **5.5.1 Create Base List Template:** Create `_project_list_base.html` with grid, pagination, and card include.
    - [X] **5.5.2 Create Card Partial:** Create `_project_card.html` for displaying a single project.
    - [X] **5.5.3 Create Specific List Templates:** Create `project_list_scans.html`, `project_list_videos.html`, `project_list_stills.html` extending the base.
- [X] **5.6 Update Base Navigation (`templates/base.html`):**
    - [X] **5.6.1 Update Links:** Change header/mobile nav links to point to new list view URL names (`core:scan_list`, etc.).
- [X] **5.7 Update Homepage Template (`templates/core/home.html`):**
    - [X] **5.7.1 Remove Project Loop:** Delete the old "Featured Work" section.
    - [X] **5.7.2 Add Static Content:** Add introductory text and links to the new list pages.
- [X] **5.8 Database Migrations:**
    - [X] **5.8.1 Delete Old Data:** (User confirmed completed) Ensure old projects/types are deleted via admin before migrating.
    - [X] **5.8.2 Make Migrations:** Run `makemigrations core`.
    - [X] **5.8.3 Migrate:** Run `migrate`.
- [X] **5.9 Verification:**
    - [X] **5.9.1 Check Pages:** Verify homepage, new list pages load correctly.
    - [X] **5.9.2 Check Admin:** Verify `project_type` choice field in admin.
    - [X] **5.9.3 Re-add & Check Content:** Re-add test projects via admin and verify they appear on the correct list pages.
- [X] **5.10 Version Control Checkpoint:** Stage all changes from Phase 5. Generate commit message (e.g., "refactor: Implement hardcoded visualization type pages"). Await user confirmation to commit.

---

**Phase 6: Enhance AI Assistant Capabilities (Memory Bank & Core MCP Tools)**

*AI Assistant Guidance: This phase implements a persistent Memory Bank system using structured Markdown files and integrates key MCP servers (GitHub, Browser Tools) to significantly enhance context retention and provide access to essential external development tools. Adhere strictly to the memory protocol and tool usage rules.*

- [X] **6.1 Implement Enhanced Memory Bank System (Rules-Based):**
    - [X] **6.1.1 Create Directory & Core Files:** Ensure `memory-bank/` exists at root. Create/ensure the following Markdown files exist inside `memory-bank/`:
        - `project_brief.md`
        - `active_context.md`
        - `progress.md`
        - `system_patterns.md` *(For architectural decisions, reusable patterns)*
        - `tech_context.md` *(For specific tech stack details, versions, setup)*
    - [X] **6.1.2 Populate `project_brief.md`:** Draft high-level project goals, audience, core features, constraints based on overall project understanding. *(Use AI assist if needed: "Draft content for @file:memory-bank/project_brief.md based on our project goals.")*
    - [X] **6.1.3 Populate `tech_context.md`:** Add details about the chosen tech stack (Django version, Python version, Tailwind setup method, SQLite for dev, planned PostgreSQL for prod).
    - [X] **6.1.4 Populate `system_patterns.md`:** Add initial entries about key architectural decisions made so far (e.g., "Modular Monolith approach using Django Apps", "SSR via Django Templates", "Client-specific pages via dynamic templates").
    - [X] **6.1.5 Populate `active_context.md`:** Initialize: "Status: Completed Phase 5 (DB Models/Admin). Current Focus: Phase 6 (Memory/Tools). Next Step: 6.1.6."
    - [X] **6.1.6 Populate `progress.md`:** Initialize: "Log: Phase 1-5 completed. Key structures: Django backend, basic frontend layout, Tailwind CSS, auth prep, core Visualization models & admin."
    - [X] **6.1.7 Create/Refine Memory Bank Rule:** Ensure `.cursor/rules/core/01_memory_bank_protocol.mdc` exists and contains robust instructions:
        - Update YAML Frontmatter: Set `ruleType: alwaysApply: true` and `priority: 100` (high priority).
        - **Guideline:** "Context Loading: At the start of complex tasks, new phases, or session resumption, ALWAYS read context from: @file:memory-bank/project_brief.md, @file:memory-bank/active_context.md, @file:memory-bank/progress.md, @file:memory-bank/system_patterns.md, @file:memory-bank/tech_context.md."
        - **Guideline:** "Active Context Update: After planning or completing a significant action, update @file:memory-bank/active_context.md detailing the `Status`, `Current Focus`, and `Next Step` (referencing the task number in @file:TASKS.mdc)."
        - **Guideline:** "Progress Logging: After completing major milestones (like a Phase) or resolving significant errors, add a concise entry to @file:memory-bank/progress.md."
        - **Guideline:** "Plan Mode ('plan this task'): Read relevant memory files, analyze requirements, outline steps, update `active_context.md` with the plan, await user confirmation."
        - **Guideline:** "Act Mode ('implement task X'): Read relevant memory files (especially `active_context.md`), execute the step, report outcome, log errors/completions in `progress.md` (if milestone), update `active_context.md` with next step/status."
    - [X] **6.1.8 Update Core Protocol:** Verify/ensure @file:.cursor/rules/00_core_assistant_protocol.mdc includes a directive to use the memory system: "Actively use and maintain the memory system defined in @file:.cursor/rules/core/01_memory_bank_protocol.mdc."

- [X] **6.2 Setup GitHub MCP Server:**
    - [X] **6.2.1 Create/Update `mcp.json`:** Ensure `.cursor/mcp.json` exists with the `mcpServers` object.
    - [X] **6.2.2 Configure GitHub MCP:** Add the GitHub MCP configuration. **Crucially, consult the official documentation** (`@web https://github.com/modelcontextprotocol/servers/tree/main/src/github` or via `cursor.directory`) for the *exact* required `command`, `args`, and `env` variables. Add this config block to `mcpServers`.
    - [X] **6.2.3 Update `.env.example`:** Add `GITHUB_TOKEN=` placeholder to @file:.env.example. Add comment: `# Required GitHub Personal Access Token with repo scope`.
    - [X] **6.2.4 Verify Installation:** Using the terminal tool, run any required installation command (e.g., `npx -y @mcp/github` if using stdio). Report success/failure.
    - [X] **6.2.5 Create GitHub MCP Rule:** Create file `.cursor/rules/tools/github_mcp.mdc`.
    - [X] **6.2.6 Populate Rule:** Add usage rules:
        - Guideline: "Use GitHub MCP for read-only operations (e.g., `git status`, list branches, view history) when requested to understand repository state."
        - Guideline: "Use GitHub MCP for write operations (e.g., commit, push, create branch/PR) **ONLY** when explicitly instructed and after user confirmation of the exact action."
        - Guideline: "Before committing, always present the generated commit message for approval."
        - Set `ruleType: agent-requested` with `description: Interact with the GitHub repository using MCP`.

- [X] **6.3 Setup Browser Tools MCP Server (`AgentDeskAI/browser-tools-mcp`):**
    - [X] **6.3.1 Configure Browser Tools MCP:** Add the configuration for `@agentdesk/browser-tools-mcp` to `mcp.json`. **Consult the documentation** (`@web https://github.com/AgentDeskAI/browser-tools-mcp`) for the correct `command` (likely `npx -y @agentdesk/browser-tools-mcp`), `args`, and any necessary `env` variables (check if API keys are needed for its backend).
    - [X] **6.3.2 Verify Installation:** Run installation command (`npx -y @agentdesk/browser-tools-mcp`). Report success/failure.
    - [X] **6.3.3 Create Browser Tools MCP Rule:** Create file `.cursor/rules/tools/browser_tools_mcp.mdc`.
    - [X] **6.3.4 Populate Rule:** Add usage rules:
        - Guideline: "Use Browser Tools MCP for tasks like checking console logs, network activity, or taking screenshots when debugging frontend issues or verifying UI elements, *only when specifically requested*."
        - Guideline: "Always state the specific browser tool command you intend to use before execution."
        - Set `ruleType: agent-requested` with `description: Interact with the browser via AgentDesk Browser Tools MCP`.

- [X] **6.4 Update Core Protocol (Tools):**
    - [X] **6.4.1 Verify Directive:** Ensure directive #8 in @file:.cursor/rules/00_core_assistant_protocol.mdc references configured tools and their rules (e.g., "Utilize configured MCP servers (GitHub, Browser Tools) per rules in @file:.cursor/rules/tools/... when relevant or requested.").

- [X] **6.5 Verification & Testing:**
    - [X] **6.5.1 Memory Test:** Ask the AI to recall the project goal and backend framework based *only* on @file:memory-bank/project_brief.md and @file:memory-bank/tech_context.md. Verify correct recall.
    - [X] **6.5.2 GitHub MCP Test:** Attempt a simple GitHub MCP read operation (e.g., `search_repositories`). Verify success.
    - [X] **6.5.3 Browser Tools MCP Test:** Attempt a simple Browser Tools MCP operation (e.g., `getConsoleLogs`). Requires the necessary browser extension and local server components to be running correctly. Verify success.
- [X] **6.6 Version Control Checkpoint:** Stage all changes (`memory-bank/`, `mcp.json`, `.cursor/rules/` updates, `.env.example` updates). Generate commit message (e.g., "feat: Implement enhanced Memory Bank and configure GitHub/Browser Tools MCPs & rules"). Await confirmation to commit.

---

**Phase 7: Implement User Content Flow, Refine Admin & Templates, Document Structure**

*AI Assistant Guidance: This phase implements the core logic for displaying user-specific content, enhances the Admin interface for easier content management, refines the template structure using partials, and thoroughly documents the established project structure and conventions.*

- [X] **7.1 Implement User-Specific Content Display Logic:**
    - **7.1.1 Refine `UserPageView` (`apps/accounts/views.py`):** Modify `get_context_data`:
        - Retrieve the target user object (`get_object_or_404(User, username=self.kwargs['username'])`).
        - Query `VisualizationProject` model, filtering by `owner=target_user`. Decide if `is_public=False` should also be filtered or if users see all their own items. *(AI: Recommend showing all owner's items, public and private, on their specific page).*
        - Pass the filtered queryset (e.g., `user_projects`) and the `target_user` object to the template context.
    - **7.1.2 Update User Page Templates (`user_page.html` & Specific Overrides):** Modify `templates/accounts/user_page.html` (and example `test01.html`) to:
        - Display heading: "Projects for {{ target_user.username }}".
        - Loop through `user_projects`.
        - Include @file:templates/core/_project_card.html partial for each project. Handle `{% empty %}` case.
    - **7.1.3 Verification:** Test this logic thoroughly as described in original Task 7.8.2.

- [X] **7.2 Enhance Admin for User Content Assignment:**
    - **7.2.1 Ensure Owner Field on Project Form (`apps/core/admin.py`):** Review `VisualizationProjectAdmin`. Explicitly add `owner` to `fields` or `fieldsets` to guarantee it appears on the add/change form. Suggest a logical field grouping using `fieldsets` if not already present.
    - **7.2.2 Implement Inline Admin on User Page (`apps/accounts/admin.py`):**
        - Create `VisualizationProjectInline(admin.TabularInline)` for `VisualizationProject`. Set `model`, `fk_name='owner'`, show limited `fields` (e.g., 'title', 'project_type', 'is_public'), set `extra=1`.
        - Create `CustomUserAdmin(UserAdmin)` inheriting from `UserAdmin`. Add `inlines = [VisualizationProjectInline]`.
        - Unregister default `User` admin and re-register with `CustomUserAdmin`.
    - **7.2.3 Verification:** Log in to admin. Verify `owner` field on Project form. Go to a User's change page. Verify the inline section for managing their projects appears and works.

- [X] **7.3 Refine Template Structure with Partials:**
    *   **7.3.1 Create Partials Directory:** Create `templates/partials/` if it doesn't exist.
    *   **7.3.2 Extract Header/Footer:** Move `<header>...</header>` and `<footer>...</footer>` content from @file:templates/base.html into `templates/partials/_header.html` and `templates/partials/_footer.html`.
    *   **7.3.3 Include Partials:** Replace extracted content in @file:templates/base.html with `{% include 'partials/_header.html' %}` and `{% include 'partials/_footer.html' %}`.
    *   **7.3.4 Verification:** Run dev server. Check multiple pages (homepage, list pages, login, profile) render correctly with header/footer included via partials.

- [X] **7.4 Review & Document Final Project Structure:**
    - **7.4.1 Review Root & Apps:** Briefly review root file locations and `apps/` structure. Confirm no further changes needed based on previous reviews (Tasks 7.1-7.2 of Option B are implicitly covered here).
    - **7.4.2 Document Structure (`README.md` & Memory Bank):**
        - Update @file:README.md "Project Structure" section reflecting final layout (`apps/`, `config/`, `templates/` including `partials/`, `static/`, `memory-bank/`).
        - Update @file:memory-bank/system_patterns.md detailing the structure rules for apps, templates (incl. partials), static files, config, memory, rules.
- [X] **7.5 Document Core Conventions & URL Strategy:**
    - **7.5.1 Update `README.md`:** Summarize key Naming Conventions, View Patterns (CBV preference), Version Control format. Add section on URL Strategy: "Always use named URL patterns and the `{% url %}` tag / `reverse()` function."
    - **7.5.2 Update Memory Bank:** Ensure `system_patterns.md` and `tech_context.md` accurately reflect these conventions (PEP8, CBVs, named URLs, commit format).
    - **7.5.3 Update Rules:** Add/verify rule in @file:.cursor/rules/backend/django_rules.mdc enforcing named URLs. Add/verify rule in @file:.cursor/rules/frontend/01_layout_styling_base.mdc about using partials for repeated sections like header/footer.
- [X] **7.6 Final Documentation & Memory Update:**
    - **7.6.1 Update `active_context.md`:** Set status: "Completed Phase 7 (User Content Flow, Admin/Template Refinement, Docs). Ready for Phase 8 (Dynamic Content/Styling)." Set Next Step to 8.1.1.
    - **7.6.2 Update `progress.md`:** Add entry: "Phase 7: Implemented dynamic user content display. Enhanced User admin with inline projects. Refined template structure with partials. Documented final structure and conventions."
- [X] **7.7 Version Control Checkpoint:** Stage all changes (views, admin, templates, docs, memory files, rules). Generate comprehensive commit message (e.g., "feat: Implement user content flow, enhance admin, refactor templates & update docs"). Await confirmation to commit.

---

**Phase 8: Dynamic Content Display & Styling Refinement**

*AI Assistant Guidance: This phase connects the database models to the frontend templates to display dynamic content, implements pagination, and applies more specific styling based on the chosen framework (Tailwind CSS) and design blueprints.*

- [X] **8.1 Implement Dynamic Data in List Views:**
    - **8.1.1 Modify List Views:** Update the list views (`ScanListView`, `VideoListView`, `StillListView` in `apps/core/views.py`) to:
        - Query the `VisualizationProject` model, filtering by the correct `project_type` *and* `is_public=True` (for public-facing lists).
        - Pass the queryset of projects to the template context (e.g., `context['projects'] = projects`).
    - **8.1.2 Update Base List Template:** Modify `templates/core/_project_list_base.html` to loop through the `projects` context variable (e.g., `{% for project in projects %}`). Inside the loop, include the project card partial. Add handling for when the list is empty (e.g., `{% empty %}`).
    - **8.1.3 Update Card Partial:** Modify `templates/core/_project_card.html` to display dynamic data from each `project` object:
        - `project.title`
        - `project.description` (perhaps truncated)
        - Conditionally display either `project.image` (using `{{ project.image.url }}` within an `<img>` tag) or `project.embed_code` (using `{{ project.embed_code|safe }}`).
        - Potentially add a link to a future detail page (use placeholder `#` for now).
- [X] **8.2 Implement Pagination:**
    - **8.2.1 Update Base List View:** Modify `BaseProjectListView` in `apps/core/views.py` to inherit from Django's `ListView` and set `paginate_by = 12` (or a suitable number).
    - **8.2.2 Add Pagination Controls Template:** Create a new template partial `templates/partials/_pagination.html`. Implement standard pagination controls using Django's `page_obj` context variable (e.g., links for previous/next page, page numbers).
    - **8.2.3 Include Pagination in List Template:** Include the pagination partial in `templates/core/_project_list_base.html`.
- [X] **8.3 Refine Tailwind CSS Styling:**
    - **8.3.1 Apply Base Styles:** Enhance `templates/base.html` using Tailwind classes for basic typography (apply font family, base size/leading from design blueprints/rules), background colors, and overall layout spacing (container, margins). Reference @file:.cursor/rules/frontend/01_layout_styling_base.mdc.
    - **8.3.2 Style Header & Footer:** Apply Tailwind classes to `templates/base.html` (or dedicated partials if created) for header/footer layout, navigation links, and appearance.
    - **8.3.3 Style List/Card:** Apply Tailwind classes to `_project_list_base.html` and `_project_card.html` to create the desired grid layout (e.g., `grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4`), card appearance (borders, shadows, padding), image/embed styling, and text styling. Aim for consistency with design blueprints (`Markdown_Layout_*.txt`).
    - **8.3.4 Refine Tailwind Rules:** Update @file:.cursor/rules/frontend/03_tailwind_config.mdc with specific conventions used (e.g., preferred spacing scale, color palette names from `tailwind.config.js`, common component patterns).
- [X] **8.4 Verification:**
    - **8.4.1 Add Test Data:** Ensure several `VisualizationProject` entries (with different types, some with images, some with embeds) exist via the Django Admin. Include both public and private projects.
    - **8.4.2 Check List Pages:** Access `/scans/`, `/videos/`, `/images/`. Verify:
        - Only public projects of the correct type are displayed.
        - Project titles, descriptions, images/embeds are shown dynamically.
        - Pagination controls appear and function correctly if more projects exist than `paginate_by`.
        - Basic Tailwind styling is applied to layout, cards, typography.
    - **8.4.3 Responsiveness Check:** Briefly check list pages on different screen sizes (using browser dev tools) to ensure basic responsiveness from Tailwind classes.
    - **8.4.4 Report:** Confirm functionality and report any styling/data display issues.
- [X] **8.5 Version Control Checkpoint:** Stage all changes (views, templates, static files, rule updates). Generate commit message (e.g., "feat: Implement dynamic content display in list views with pagination and initial Tailwind styling"). Await confirmation to commit.

---

**Phase 9: Implement News/Updates Section**

*AI Assistant Guidance: This phase focuses on adding a News/Updates section to the site. Create a dedicated Django app, define the necessary model, set up admin management, implement list and detail views/templates, display the latest items on the homepage, and ensure the structure supports future content generation.*

- [X] **9.1 Create `news` App:**
    - **9.1.1 Scaffold App:** Using the terminal, create a new Django app named `news` inside the `apps/` directory (`python manage.py startapp news apps/news`).
    - **9.1.2 Register App:** Add `'apps.news.apps.NewsConfig'` to the `INSTALLED_APPS` list in `config/settings.py`.
    - **9.1.3 Basic Files:** Verify the standard app files (`models.py`, `views.py`, `admin.py`, `apps.py`, `tests.py`) and a `migrations/` directory were created inside `apps/news/`.
- [X] **9.2 Define `NewsArticle` Model (`apps/news/models.py`):**
    - **9.2.1 Create Model:** Define a `NewsArticle` model with the following fields:
        - `title`: CharField (max_length=200)
        - `slug`: SlugField (max_length=255, unique=True, help_text="Unique URL-friendly identifier, auto-generated from title.")
        - `content`: TextField (help_text="Main content of the news update.")
        - `category`: CharField (max_length=50, blank=True, help_text="Optional category like 'Project Update', 'Technology', 'Announcement'.") *(Simple CharField instead of ForeignKey for less structure)*
        - `featured_image`: ImageField (upload_to='news_featured/', null=True, blank=True, help_text="Optional image for the update.")
        - `status`: CharField (max_length=10, choices=[('draft', 'Draft'), ('published', 'Published')], default='draft')
        - `published_at`: DateTimeField (null=True, blank=True, auto-set on publish)
        - `created_at`: DateTimeField (auto_now_add=True)
        - `updated_at`: DateTimeField (auto_now=True)
    - **9.2.2 Add Meta Options:** Include `class Meta:` with `ordering = ['-published_at', '-created_at']` and `verbose_name_plural = "News Articles"`.
    - **9.2.3 String Representation:** Implement `__str__` returning `self.title`.
    - **9.2.4 Slug & Publish Date Logic:** Override the `save` method:
        - Automatically generate the `slug` from `title` using `slugify` if `slug` is empty.
        - If `status` is changed to `'published'` and `published_at` is not set, set `published_at = timezone.now()`. (Requires `from django.utils import timezone`).
- [X] **9.3 Database Migrations for News:**
    - **9.3.1 Install Pillow (if not done):** Ensure `Pillow` is in `requirements.txt` and installed.
    - **9.3.2 Make Migrations:** Run `python manage.py makemigrations news`. Verify migration file created.
    - **9.3.3 Migrate:** Run `python manage.py migrate`. Verify success.
- [X] **9.4 Configure News Admin (`apps/news/admin.py`):**
    - **9.4.1 Import & Register:** Import `NewsArticle` from `.models`.
    - **9.4.2 Create `NewsArticleAdmin`:** Define `NewsArticleAdmin(admin.ModelAdmin)`:
        - `list_display = ('title', 'category', 'status', 'published_at', 'created_at')`
        - `list_filter = ('status', 'category', 'published_at')`
        - `search_fields = ('title', 'content', 'category')`
        - `prepopulated_fields = {'slug': ('title',)}`
        - `date_hierarchy = 'published_at'`
        - Add `featured_image`, `category` to `fieldsets` or `fields`.
    - **9.4.3 Register Model:** Register `NewsArticle` using `NewsArticleAdmin`: `admin.site.register(NewsArticle, NewsArticleAdmin)`.
    - **9.4.4 Verification:** Test admin: create news articles (add category text, upload featured image), check filters/search.
- [X] **9.5 Implement News Views (`apps/news/views.py`):**
    - **9.5.1 News List View:** Create `NewsListView` inheriting from `ListView`:
        - `model = NewsArticle`
        - `template_name = 'news/news_list.html'`
        - `context_object_name = 'articles'`
        - `paginate_by = 10`
        - Override `get_queryset` for `status='published'`, ordered by `-published_at`.
    - **9.5.2 News Detail View:** Create `NewsDetailView` inheriting from `DetailView`:
        - `model = NewsArticle`
        - `template_name = 'news/news_detail.html'`
        - `context_object_name = 'article'`
        - `slug_field = 'slug'`, `slug_url_kwarg = 'slug'`
        - Override `get_queryset` for `status='published'`.
- [X] **9.6 Implement News URLs (`apps/news/urls.py` & `config/urls.py`):**
    - **9.6.1 Create App URLs (`apps/news/urls.py`):** Define patterns for:
        - News list (`''`, name=`list`).
        - News detail (`'<slug:slug>/'`, name=`detail`).
    - **9.6.2 Include App URLs (`config/urls.py`):** Add `path('news/', include(('apps.news.urls', 'news'), namespace='news')),`.
- [X] **9.7 Create News Templates (`templates/news/`):**
    - **9.7.1 Create News List Template:** Create `templates/news/news_list.html` extending `base.html`.
        - Loop through `articles`.
        - Include a partial `templates/news/_news_item.html` for each article.
        - Include pagination partial.
    - **9.7.2 Create News Item Partial:** Create `templates/news/_news_item.html` displaying article title (linked to detail), published date, category (if any), featured image thumbnail, and content snippet.
    - **9.7.3 Create News Detail Template:** Create `templates/news/news_detail.html` extending `base.html`. Display article title, published date, category, featured image (larger), and full content.
- [X] **9.8 Integrate Latest News on Homepage:**
    - **9.8.1 Modify `HomePageView` (`apps/core/views.py`):** Update `get_context_data`:
        - Query: `latest_news = NewsArticle.objects.filter(status='published').order_by('-published_at')[:3]`
        - Add `latest_news` to the context.
    - **9.8.2 Update Homepage Template (`templates/core/home.html`):**
        - Add section "Latest News & Updates".
        - Loop through `latest_news`.
        - Include `templates/news/_news_item.html` partial.
        - Add link to main news page (`{% url 'news:list' %}`).
- [X] **9.9 Create News Rules:**
    - **9.9.1 Create Rule File:** Create `.cursor/rules/apps/news_rules.mdc`.
    - **9.9.2 Populate Rules:** Add rules defining news conventions: Model fields, status workflow, slug generation, use of Admin, CBVs, template structure, named URLs. Reference @file:.cursor/rules/backend/django_rules.mdc.
- [ ] **9.10 Verification:**
    - **9.10.1 Add Test Articles:** Via admin, create several NewsArticle entries (draft/published, different categories, with/without images).
    - **9.10.2 Check News List Page:** Access `/news/`. Verify only published articles appear, ordered correctly, pagination works.
    - **9.10.3 Check News Detail Page:** Click an item link. Verify full article content and details display. Check draft access fails.
    - **9.10.4 Check Homepage Integration:** Access `/`. Verify "Latest News" shows correct 3 published items. Check link to main news page.
    - **9.10.5 Report:** Confirm functionality.
- [ ] **9.11 Documentation & Memory Update:**
    - **9.11.1 Update `README.md`:** Explain News/Updates feature.
    - **9.11.2 Update Memory Bank:** Update `system_patterns.md`, `tech_context.md`, `progress.md`, `active_context.md` to reflect the new `news` app and its purpose.
- [ ] **9.12 Version Control Checkpoint:** Stage changes (new `news` app files, core view/template updates, rule file, docs/memory updates). Generate commit message (e.g., "feat(news): Implement News/Updates section with list/detail views and homepage integration"). Await confirmation to commit.

---
