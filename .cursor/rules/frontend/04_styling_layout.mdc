---
description: 
globs: static/js/**/*.js,templates/**/*.html,static/css/**.css
alwaysApply: false
---
---
description: Governs frontend structure, styling (Tailwind), and basic JS.
globs: static/js/**/*.js,templates/**/*.html,static/css/**.css
tags: frontend, html, css, tailwind, javascript, style, layout
---

# Frontend Styling & Layout Rules

These rules govern the structure and presentation of the frontend components. They complement the Django-specific rules (@file:.cursor/rules/backend/django_rules.mdc) and the core protocol (@file:.cursor/rules/00_core_assistant_protocol.mdc).

## 1. HTML Structure & Layout

*   **Base Layout:** All pages MUST extend the base template: @file:templates/base.html.
*   **Main Container:** Content within sections should generally use a container `div` with `class="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"` for consistent width and padding.
*   **Semantic HTML:** Use appropriate HTML5 semantic tags (`<header>`, `<nav>`, `<main>`, `<section>`, `<footer>`, etc.) to structure content logically.
*   **Partials:** Extract reusable HTML components (e.g., header, footer, cards, forms) into the `templates/partials/` directory and include them using `{% include 'partials/your_partial.html' %}`. Header (@file:templates/partials/_header.html) and Footer (@file:templates/partials/_footer.html) structure derived from v0 `ClientLayout.txt`.
*   **Homepage Sections:** The homepage (@file:templates/core/home.html) is structured using `<section>` tags with specific IDs: `#hero`, `#services`, `#featured-projects`, `#client-portal`, `#news`, `#cta-banner`.
*   **Accessibility:** Keep accessibility (ARIA attributes, semantic structure) in mind, although detailed rules may be added later.

## 2. CSS Styling (Tailwind CSS)

*   **Framework:** Use **Tailwind CSS** for all styling. Apply utility classes directly in the HTML templates.
*   **Configuration:** Configure Tailwind via @file:tailwind.config.js. The main input file is @file:static/css/input.css and the compiled output is @file:static/css/output.css.
*   **Global Styles & Variables:** Base styles and CSS variables (derived from v0 `globals.txt`) are defined in `input.css` (`@layer base`, `:root`). The Tailwind theme (`tailwind.config.js`) is configured to use these variables for colors (`hsl(var(--...))`) and border radius (`var(--radius)`).
*   **Custom CSS:** Avoid writing custom CSS in `output.css`. If needed, define custom components/utilities within `input.css` using `@apply` or configure them in `tailwind.config.js`.
*   **Consistency:** Strive for consistency in spacing, colors, and typography by leveraging the theme defined in `tailwind.config.js`.
*   **Reference:** Consult @file:.cursor/rules/frontend/03_tailwind_config.mdc for specific Tailwind configuration details.

## 3. Client-Side Scripting (JavaScript)

*   **Approach:** Write **vanilla JavaScript** in @file:static/js/script.js for basic interactions.
*   **Avoid Frameworks:** Do not introduce complex JS frameworks without discussion.
*   **Minimalism:** Prefer server-side rendering and standard HTML/CSS solutions where possible.

--- 