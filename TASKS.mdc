---
description: 
globs: 
alwaysApply: true
---
 # TASKS: Architectural Visualization Platform Build

**Project Goal:** Build a website to showcase architectural visualizations (3D scans, photogrammetry, AI imagery) using static embeds (Sketchfab, Vimeo) and image galleries. Plan for minimal client authentication later and potential future AI features (blog, chatbot). Low initial traffic expected.

**AI Assistant Guidance:** Please follow these tasks sequentially, adhering to all guidelines in @file:.cursor/rules/00_core_assistant_protocol.mdc and any technology-specific rules referenced or created. Await confirmation before proceeding to the next numbered task.

---

**Phase 1: Foundation & Backend Setup**

- [ ] **1.1 Environment Verification:** (User confirmed completed) Confirm necessary tools (Python 3.x, pip, Node.js LTS, npm, Git) are installed and report versions.
- [ ] **1.2 Backend Framework Decision & Scaffolding:**
    - **1.2.1 Recommendation:** Based on project goals and reviewed blueprints, recommend **either Django or Node.js/Express**. Justify the choice referencing built-in features (auth, admin), development speed, security, maintainability, and suitability for potential AI integration. Reference @file:.cursor/rules/00_core_assistant_protocol.mdc.
    - **1.2.2 Confirmation:** Await user confirmation.
    - **1.2.3 Scaffolding:** Upon confirmation:
        - Scaffold the chosen framework's project structure (e.g., `django-admin startproject config .` & `python manage.py startapp core` potentially in an `apps/` dir for Django; standard Express setup for Node).
        - Use the activated `.venv` for Python package installs (`pip install ...`).
        - Create/update `requirements.txt` or `package.json` with core dependencies.
        - Report created files/folders.
- [ ] **1.3 Configure Core Settings & Environment:**
    - **1.3.1 Env Package:** Install and configure environment variable loading (`django-environ` or `dotenv`). Update @file:.gitignore if needed.
    - **1.3.2 `.env.example` Check:** Ensure @file:.env.example contains placeholders for `SECRET_KEY`, `DEBUG=True`, `DATABASE_URL=sqlite:///db.sqlite3`.
    - **1.3.3 Framework Settings:** Configure the main settings file (`config/settings/base.py` or similar) to load these variables. Set `DEBUG` and `ALLOWED_HOSTS` (`['localhost', '127.0.0.1']` for dev).
    - **1.3.4 Database:** Configure the framework for SQLite dev database. Run initial migrations (e.g., `python manage.py migrate`). Verify success.
- [ ] **1.4 Create Foundational Framework Rules:**
    - **1.4.1 Create Rule File:** Create a *new* rule file in the appropriate subfolder, e.g., `.cursor/rules/backend/django_rules.mdc` or `.cursor/rules/backend/node_express_rules.mdc`.
    - **1.4.2 Populate Basic Rules:** Add foundational rules to this *new file*, including:
        - Preferred project structure (e.g., Django apps in `apps/`, Node modules).
        - Naming conventions (files, variables, classes).
        - View/Controller patterns (e.g., Class-Based Views vs Functions).
        - Basic framework-specific security reminders (CSRF, input validation).
        - **Include a simple code example** demonstrating the preferred style (e.g., a basic Django view or Express route handler).
    - **1.4.3 Reference Core Protocol:** Ensure this new rule file implicitly uses the core protocol (or add `@file:.cursor/rules/00_core_assistant_protocol.mdc` if needed, though broad globs might cover it).
- [ ] **1.5 Version Control Checkpoint:** Add all new/modified files (framework code, `.env.example` updates, new rule file) to Git staging. Generate a Conventional Commit message (e.g., "feat: Scaffold [Django/Node] backend, configure settings, add initial framework rules"). Await user confirmation to commit.

---

**Phase 2: Foundational Frontend Layout & Structure (Mobile-First)**

*AI Assistant Guidance: This phase establishes the core HTML structure and basic frontend configuration, guided by mobile-first principles and insights from design blueprints. Styling will be minimal; focus is on structure and semantics.*

- [ ] **2.1 Frontend Approach Decision & Validation:**
    - **2.1.1 Recommendation:** Based on the goal of displaying embedded content simply and efficiently, confirm that **Server-Side Rendering (SSR) using the backend framework's templating engine** (e.g., Django Templates) is the most suitable initial approach. Justify why a complex SPA framework is not needed now. Reference mobile-first best practices.
    - **2.1.2 Confirmation:** Await user confirmation.
- [ ] **2.2 Scaffold Core Frontend Directories & Files:**
    - **2.2.1 Create Directories:** Ensure the following standard directories exist: `templates/` (with a subdirectory for the core app, e.g., `templates/core/`), `static/`, `static/css/`, `static/js/`, `static/images/`.
    - **2.2.2 Create Base Files:** Create:
        - `templates/base.html` (with HTML5 boilerplate, viewport meta tag for responsiveness).
        - `templates/core/home.html` (initially empty or just extending base).
        - `static/css/style.css` (empty or with basic resets/body styles).
        - `static/js/script.js` (empty).
- [ ] **2.3 Implement Core Semantic Layout (`templates/base.html`):**
    - **2.3.1 Structure:** Implement the main page structure within `<body>` using semantic HTML5 elements:
        - `<header>`: Placeholder for logo and main navigation.
        - `<main>`: Primary content area. Include a content block placeholder (e.g., `{% block content %}{% endblock %}` for Django). Structure inner divs anticipating a simple grid/column layout later.
        - `<footer>`: Placeholder for copyright and secondary links.
    - **2.3.2 Mobile-First:** Ensure the structure is inherently mobile-friendly (e.g., linear flow, no fixed widths initially).
    - **2.3.3 Accessibility:** Use appropriate landmarks (`<nav>` within header, etc.).
- [ ] **2.4 Configure Static & Template File Serving:**
    - **2.4.1 Settings:** Configure the backend framework's settings (`settings.py` or equivalent) to correctly locate the `templates/` directory and the `static/` directory (`STATIC_URL`, `STATICFILES_DIRS`).
    - **2.4.2 Verification:** Briefly test if the development server can find and potentially serve `style.css` (even if empty) when linked from `base.html`. Report success or configuration needed.
- [ ] **2.5 Create Foundational Frontend Rules:**
    - **2.5.1 Create Rule File:** Create a *new* rule file: `.cursor/rules/frontend/01_layout_styling_base.mdc`.
    - **2.5.2 Populate Basic Rules:** Add foundational rules to this file, referencing the design blueprints:
        - **Guideline:** Enforce **Mobile-First** design approach for all layouts and CSS.
        - **Guideline:** Mandate use of **semantic HTML5** elements (`header`, `nav`, `main`, `footer`, `section`, `article`).
        - **Guideline:** Specify basic CSS structure (e.g., recommend CSS resets, basic `box-sizing: border-box;`).
        - **Guideline:** Note preference for CSS Grid/Flexbox for layout (to be detailed later).
        - **Guideline:** Include placeholder for typography rules (font stack, base size - e.g., 16px).
        - **Guideline:** Reference @file:templates/base.html as the core layout structure.
        - **Example:** Include a small HTML snippet showing correct semantic structure for the header/main/footer.
- [ ] **2.6 Version Control Checkpoint:** Stage all new/modified frontend files (templates, static files, settings changes) and the new frontend rule file. Generate a Conventional Commit message (e.g., "feat: Establish mobile-first frontend structure, base layout, static files config, and layout rules"). Await user confirmation to commit.

---

**Phase 3: Content Display (Placeholders)**

- [ ] **3.1 Homepage Route & View:** Implement the route (`/`) and view function/handler to render a specific homepage template (e.g., `templates/core/home.html`) which extends `base.html`.
- [ ] **3.2 Embed Sketchfab:** In `templates/core/home.html`, add placeholder Sketchfab iframe embed code within the main content block.
- [ ] **3.3 Embed Vimeo:** Add placeholder Vimeo iframe embed code.
- [ ] **3.4 Image Gallery:** Add 1-2 placeholder images to `static/images/`. Display them on the homepage using `<img>` tags referencing static paths (use framework's static tag like `{% static 'images/...' %}`).
- [ ] **3.5 Verification:** Run dev server. Access homepage. Verify layout, embeds (iframes load), and images display. Report success or errors.
- [ ] **3.6 Version Control Checkpoint:** Stage changes. Generate commit message (e.g., "feat: Implement homepage view with placeholder embeds and gallery"). Await confirmation to commit.

---

**(Further Phases: Styling with Tailwind/CSS, Authentication, Database Models, Deployment, AI Features will follow)**

