---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: Current active tasks list
globs: 
alwaysApply: false
---

# TASKS: Architectural Visualization Platform Build

**Note:** Tasks for Phases 1 through 17 have been completed and archived in @file:docs/archived_tasks_phase_1_to_17.md.
This file contains tasks starting from Phase 18.

**AI Assistant Guidance:** Please follow these tasks sequentially, adhering to all guidelines in @file:.cursor/rules/00_core_assistant_protocol.mdc and any technology-specific rules referenced or created. Await confirmation before proceeding to the next numbered task. Refer to the memory bank (@file:memory-bank/*) for project context.

---

**Phase 18: Refine CSS Structure & Centralize Theme/Layout Variables**

*AI Assistant Guidance: Reorganize CSS files for maintainability. Move ALL CSS custom properties from `base.html` into a dedicated `variables.css`. Implement a `.layout-container` utility class driven by CSS variables. Update Tailwind config and build process. Refactor templates to use the new container class.*

- [x] **18.1 Define New CSS Directory Structure:**
    *   [x] **18.1.1 Finalize Structure Plan:**
    *   [x] **18.1.2 Define Import Order in `main.css`:**

- [x] **18.2 Implement New CSS Structure & Migrate:**
    *   [x] **18.2.1 Create Directories:**
    *   [x] **18.2.2 Create `main.css`:**
    *   [x] **18.2.3 Create & Populate `variables.css`:**
    *   [x] **18.2.4 Create & Populate `tailwind_directives.css`:**
    *   [x] **18.2.5 Create & Populate `gallery.css`:**
    *   [x] **18.2.6 Create & Populate `helpers.css`:**
    *   [x] **18.2.7 Create Empty `typography.css`:**
    *   [x] **18.2.8 Delete Old Files:**
    *   [x] **18.2.9 Remove Inline Style Block:**
    *   [x] **18.2.10 Update `.gitignore`:**

- [x] **18.3 Implement Centralized Layout Control:**
    *   [x] **18.3.1 Define Layout Variables:**
    *   [x] **18.3.2 Define `.layout-container` Class:**

- [x] **18.4 Update Build Process & Tailwind Config:**
    *   [x] **18.4.1 Update `package.json` Scripts:**
    *   [x] **18.4.2 Verify `tailwind.config.js`:**
    *   [x] **18.4.3 Re-run `npm install` (If needed):**

- [x] **18.5 Refactor Templates to Use Layout Container:**
    *   [x] **18.5.1 Identify Containers:**
    *   [x] **18.5.2 Replace with Class:**
    *   [x] **18.5.3 Verify Header/Footer:**

- [x] **18.6 Build, Verify & Document:**
    *   [x] **18.6.1 Run `npm run build:css`:**
    *   [x] **18.6.2 Run Dev Server & Test:**
    *   [x] **18.6.3 Update Memory Bank & Rules:**

- [x] **18.7 Version Control Checkpoint:**

---

**Phase 19: Consolidate Templates & Refine CSS Structure**

**Objective:** Streamline template partials. Keep existing CSS structure (from end of Phase 17 / reverted state).

**Tasks:**

- [x] **19.1 Consolidate Template Partials**
    - [x] **19.1.1 Investigate `_project_card.html` Usage:**
        - Read `templates/core/_project_card.html`.
        - Read `templates/core/partials/_project_card.html`.
        - Read `templates/core/_project_list_base.html`, `project_list_scans.html`, `project_list_stills.html`, `project_list_videos.html`, `home.html` to identify which `_project_card.html` path is included and the context variable used (`project` or `item`).
    - [x] **19.1.2 Consolidate `_project_card.html`:**
        - Determined `templates/core/partials/_project_card.html` is canonical.
        - Verified includes in list views use correct path and variable (`item`).
        - Deleted redundant `templates/core/_project_card.html`.
    - [x] **19.1.3 Investigate & Consolidate `_news_card.html`:**
        - Read `templates/partials/_news_card.html`.
        - Read `templates/news/_news_card.html`.
        - Read `templates/news/news_list.html` and `templates/core/home.html`.
        - Determined two distinct partials are needed.
        - Created `templates/news/partials/` directory.
        - Moved `news/_news_card.html` -> `news/partials/_news_card.html`.
        - Moved `partials/_news_card.html` -> `news/partials/_news_card_home.html`.
        - Updated includes in `news_list.html` and `home.html`.
        - Deleted original redundant files.
    - [x] **19.1.4 Verify Other Partials:** Reviewed partials in `templates/partials/` and `templates/accounts/partials/`. Confirmed locations are appropriate.
    - [x] **19.1.5 Test Template Rendering:** Verified pages using consolidated partials render correctly.

- [-] **19.2 Define New CSS Directory Structure:** (Skipped - Keeping existing structure)
    - [-] **19.2.1 Finalize Structure Plan:**
    - [-] **19.2.2 Define Import Order in `main.css`:**

- [-] **19.3 Implement New CSS Structure & Migrate:** (Skipped - Keeping existing structure)
    *   [-] **19.3.1 Create Directories:**
    *   [-] **19.3.2 Create `main.css`:**
    *   [-] **19.3.3 Create & Populate `variables.css`:**
    *   [-] **19.3.4 Create & Populate `tailwind_directives.css`:**
    *   [-] **19.3.5 Create & Populate `gallery.css`:**
    *   [-] **19.3.6 Create & Populate `helpers.css`:**
    *   [-] **19.3.7 Create Empty `typography.css`:**
    *   [-] **19.3.8 Delete Old Files:**
    *   [-] **19.3.9 Remove Inline Style Block:**
    *   [-] **19.3.10 Update `.gitignore`:**

- [-] **19.4 Implement Centralized Layout Control:** (Skipped - Keeping existing structure)
    *   [-] **19.4.1 Define Layout Variables:**
    *   [-] **19.4.2 Define `.layout-container` Class:**

- [-] **19.5 Update Build Process & Tailwind Config:** (Skipped - Keeping existing structure)
    *   [-] **19.5.1 Update `package.json` Scripts:**
    *   [-] **19.5.2 Verify `tailwind.config.js`:**
    *   [-] **19.5.3 Re-run `npm install`:**

- [-] **19.6 Refactor Templates to Use Layout Container:** (Skipped - Keeping existing structure)
    *   [-] **19.6.1 Identify & Replace:**

- [-] **19.7 Build, Verify & Document:** (Skipped - CSS structure unchanged)
    *   [-] **19.7.1 Run `npm run build:css`:**
    *   [-] **19.7.2 Run Dev Server & Test:**
    *   [-] **19.7.3 Update Memory Bank & Rules:** (No major structure change to document for CSS)

- [-] **19.8 Version Control Checkpoint:** (Skipped)

---

**Phase 20: Document Project Structure**

**Objective:** Systematically explore the current project file and directory structure, document it in a dedicated memory bank file, remove the redundant structure section from `system_patterns.md`, and create a rule to enforce future updates.

**Method:** Use `list_dir` recursively for comprehensive listing. Read key representative files within each section to understand purpose. Document findings incrementally.

**Tasks:**

- [x] **20.1 Explore & Summarize Root Directory:**
    *   [x] List contents of the workspace root (`/`).
    *   [x] Read key files (`manage.py`, `.gitignore`, `.env.example`, `README.md` (if exists), `requirements.txt`, `package.json`, `tailwind.config.js`, etc.).
    *   [x] Summarize the purpose of root files and top-level directories.

- [x] **20.2 Explore & Summarize `.cursor/` Directory:**
    *   [x] List contents of `.cursor/`.
    *   [x] List contents of `.cursor/rules/` and its subdirectories (`core`, `frontend`, etc.).
    *   [x] Read key rule files (`core/00_core_assistant_protocol.mdc`, `core/01_memory_bank_protocol.mdc`) to confirm understanding.
    *   [x] Summarize the purpose of the `.cursor` directory and its rule structure.

- [x] **20.3 Explore & Summarize `apps/` Directory:**
    *   [x] List contents of `apps/`.
    *   [x] For each app (`core`, `accounts`, `news`, `slideshow`, etc.):
        *   [x] List contents of `apps/<app_name>/`.
        *   [x] Read key files (`models.py`, `views.py`, `urls.py`, `admin.py`, `apps.py`, representative templates in `apps/<app_name>/templates/`).
        *   [x] Summarize the primary responsibility of the app.
    *   [x] Summarize the overall structure and purpose of the `apps/` directory.

- [x] **20.4 Explore & Summarize `config/` Directory:**
    *   [x] List contents of `config/`.
    *   [x] Read key files (`settings.py`, `urls.py`, `wsgi.py`, `asgi.py`).
    *   [x] Summarize the purpose of the `config` directory and its files.

- [x] **20.5 Explore & Summarize `memory-bank/` Directory:**
    *   [x] List contents of `memory-bank/`.
    *   [x] Briefly review filenames to confirm purpose (no deep read needed unless structure is unclear).
    *   [x] Summarize the purpose of the `memory-bank` directory.

- [x] **20.6 Explore & Summarize `static/` Directory:**
    *   [x] List contents of `static/`.
    *   [x] List contents of `static/css/` (and subdirectories like `components`). Read `main.css`.
    *   [x] List contents of `static/js/`. Read key representative JS files (`css_gallery_init.js`, etc.).
    *   [x] List contents of `static/images/` (if exists).
    *   [x] List contents of `static/lottie/`.
    *   [x] Summarize the organization and purpose of static assets.

- [x] **20.7 Explore & Summarize `templates/` Directory:**
    *   [x] List contents of `templates/` (root level).
    *   [x] Read `templates/base.html`.
    *   [x] List contents of `templates/partials/`. Read a few representative partials.
    *   [x] List contents of `templates/registration/`.
    *   [x] List contents of `templates/admin/`.
    *   [x] List contents of app-specific template directories already covered in 20.3 (`templates/core/`, `templates/news/`, `templates/accounts/`). List partials dirs (`templates/news/partials/`, `templates/accounts/partials/`).
    *   [x] Summarize the template organization strategy.

- [x] **20.8 Explore & Summarize Other Root Items:**
    *   [x] List any remaining root-level items not covered (e.g., `media/` if present, `.venv/`, `node_modules/`, database file).
    *   [x] Summarize their purpose (often standard project components or generated directories).

- [x] **20.9 Create `project_structure.mdc`:**
    *   [x] Create the file `memory-bank/project_structure.mdc`.
    *   [x] Consolidate the summaries from steps 20.1-20.8 into a clear structure within this file. Use markdown lists or code blocks to represent the tree. Add brief descriptions for key directories/files.

- [x] **20.10 Update `system_patterns.mdc`:**
    *   [x] Read `memory-bank/system_patterns.mdc`.
    *   [x] Remove the entire "Directory Structure Conventions" section.
    *   [x] Add a sentence under a relevant heading (e.g., Core Architecture or create a new one) referencing the new documentation: "For a detailed view of the project directory layout, see @file:memory-bank/project_structure.mdc."

- [x] **20.11 Create Structure Maintenance Rule:**
    *   [x] Create a new rule file: `.cursor/rules/core/02_project_structure_maintenance.mdc`.
    *   [x] Add rule content mandating that `memory-bank/project_structure.mdc` MUST be updated whenever significant changes are made to the project's directory or key file structure (e.g., adding/removing apps, static/template directories, key config files).

- [x] **20.12 Final Verification & Commit:**
    *   [x] Briefly review `project_structure.mdc`, the modified `system_patterns.mdc`, and the new rule file for accuracy and clarity.
    *   [x] Stage relevant changes (`memory-bank/`, `.cursor/rules/`).
    *   [x] Propose commit message (e.g., "docs: Add project structure documentation and maintenance rule"). Await confirmation.

---

**Phase 21: Enhance "Our Services" Section**

*AI Assistant Guidance: Refine the "Our Services" section on the homepage (`home.html`) by restructuring the `static/svg/` directory, integrating specific SVG icons, implementing advanced CSS hover animations for the service cards, creating an adaptive layout for icons/text based on screen width, and adding interactive hover effects to the "Learn more" links and icons. Reference @file:templates/partials/_service_card.html and apply changes there primarily, ensuring updates reflect on @file:templates/core/home.html. Adhere to frontend rules @file:.cursor/rules/frontend/04_styling_layout.mdc and @file:.cursor/rules/frontend/03_tailwind_config.mdc.*

- [x] **21.1 Restructure SVG Directory & Integrate Service Icons:**
    *   [x] **21.1.1 Propose SVG Structure:** Proposed new structure: `static/svg/general/`, `static/svg/footer/`, `static/svg/services/`.
    *   [x] **21.1.2 Confirm Structure & File Placement:** User confirmed.
    *   [x] **21.1.3 Execute Restructuring:** Directories created. Logo moved to `general/`. Favicon reference updated.
    *   [x] **21.1.4 Prepare Service SVG Files:** Placed user-provided SVGs (`3d.svg`, `video.svg`, `image.svg`) into `static/svg/services/`.
    *   [x] **21.1.5 Update Project Structure Docs:** Updated `@file:memory-bank/project_structure.md`.
    *   [x] **21.1.6 Update Service Card Partial (`_service_card.html`):** Modified partial to use `<img>` tag with `{% static %}` path constructed using `icon_slug` variable.
    *   [x] **21.1.7 Update Homepage Inclusion:** Updated `{% include %}` tags in `home.html` to pass `icon_slug`.
    *   [x] **21.1.8 Apply Base Icon Styling:** Applied `w-12 h-12 mb-4` etc. to icon `img` tag.
    *   [x] **21.1.9 Verification:** Favicon loads. Icons appear correctly in service cards.

- [x] **21.2 Implement Card Hover Animation (JS-Driven):**
    *   [x] **21.2.1 Remove Old Tailwind Hover Classes:** Removed `hover:transform`, `hover:-translate-y-2`, `hover:scale-[1.03]`, `hover:shadow-xl` from the main card div in `_service_card.html`.
    *   [x] **21.2.2 Add Marker Class:** Added `service-card-group` class to the main card `div`.
    *   [x] **21.2.3 Create Component CSS File:** Created `static/css/components/our_services_card.css`.
    *   [x] **21.2.4 Define Base & Hover Styles/Animations in CSS:** Defined base styles and `@keyframes` for icon scale/bob, text scale/color, arrow translate. Created CSS rules using `.service-card-group.is-hovered` selector to apply animations.
    *   [x] **21.2.5 Import Component CSS:** Added `@import "./components/our_services_card.css";` to `static/css/main.css`.
    *   [x] **21.2.6 Create JS Hover Toggle:** Created `static/js/service_card_hover.js` with `mouseenter`/`mouseleave` listeners on `.service-card-group` elements to add/remove `.is-hovered` class.
    *   [x] **21.2.7 Include JS in `base.html`:** Added script tag for `service_card_hover.js` in `base.html`.
    *   [x] **21.2.8 Verification:** Hover over cards. Verified CSS animations trigger correctly via JS class toggle.

- [x] **21.3 Implement Adaptive Icon/Text Layout:**
    *   [x] **21.3.1 Refactor Card Structure:** Wrapped icon `img` and text content block in a parent `div` within `_service_card.html`.
    *   [x] **21.3.2 Apply Responsive Flexbox:** Applied `flex flex-col items-center text-center` (mobile) and `lg:flex-row lg:items-start lg:text-left lg:space-x-6` (large screens) to the new parent `div`.
    *   [x] **21.3.3 Size Icon:** Ensured icon `img` tag has appropriate size classes (e.g., `w-12 h-12`). Added `lg:mt-1` for slight vertical adjustment on large screens.
    *   [x] **21.3.4 Verification:** Resized browser. Layout adapts correctly at `lg` breakpoint.

- [x] **21.4 Refine "Learn More" Link (Already Part of 21.2):**
    *   [x] **21.4.1 Target Link Text & Arrow:** Confirmed text scale/color and arrow translation are handled by the CSS defined in 21.2.4 using the `.is-hovered` class.
    *   [x] **21.4.2 Add Arrow SVG:** Replaced placeholder `&rarr;` with appropriate arrow SVG code (`arrow-right.svg` placed in `static/svg/general/`). Styled SVG (`w-4 h-4 ml-1`).
    *   [x] **21.4.3 Verification:** Hover over card. "Learn more" text and arrow animate as defined in the CSS.

- [x] **21.5 Refine Service Icon Animation (Already Part of 21.2):**
    *   [x] **21.5.1 Target Icon:** Confirmed icon scale/bob animation is handled by the CSS defined in 21.2.4 using the `.is-hovered` class.
    *   [x] **21.5.2 Verification:** Hover over card. Icon animates as defined in the CSS.

- [x] **21.6 Final Build & Documentation:**
    *   [x] **21.6.1 Build CSS:** Ran `npm run build:css`.
    *   [x] **21.6.2 Update Memory Bank:** Updated `progress.md`, `active_context.md`, `system_patterns.md` (added JS Hover State Toggle pattern).
    *   [x] **21.6.3 Update Rules:** Updated frontend rules (`04_styling_layout.mdc`) with details on the JS hover pattern.

- [x] **21.7 Version Control Checkpoint:** Staged changes. Proposed commit message. Committed changes.

---

**Phase 22: Implement Hero Rotating Text Animation (Explicit Height CSS)**

*AI Assistant Guidance: Implement the rotating text animation using only CSS keyframes and transforms. Define an explicit, matching height for both the text line-height and the clipping container using arbitrary Tailwind utility classes. Calculate `translateY` steps in the keyframes based on this explicit height. This aims to eliminate clipping issues caused by size mismatches.*

- [ ] **22.1 Determine Explicit Height Value:**
    *   [ ] **22.1.1 Analyze Font Size:** Confirm the largest text size applied to the `.rotating-text-span` in @file:templates/core/home.html is `md:text-4xl` (approx 2.25rem font size).
    *   [ ] **22.1.2 Calculate Base Line Height:** Default `leading-tight` (1.25) for `text-4xl` results in approx `2.8125rem`.
    *   [ ] **22.1.3 Select Explicit Value:** Choose a slightly larger explicit value to ensure comfortable fit and avoid potential browser rendering quirks. **Target Value: `3rem` (48px)**. *(Note: This value might need minor adjustment based on visual testing).* 

- [ ] **22.2 Apply Explicit Sizing in HTML (`templates/core/home.html`):**
    *   [ ] **22.2.1 Apply Wrapper Height:** Modify the `.rotating-text-wrapper` div. Replace any existing `h-*` class with `h-[3rem]`. Ensure `overflow-hidden` and block layout (`mt-1`) are present.
        ```html
         {# Outer div for context: <div class="mt-6 text-lg md:text-xl text-slate-300"> #}
         {# ... preceding static text ... #}
         <div class="rotating-text-wrapper mt-1 h-[3rem] overflow-hidden"> {/* Explicit Height & Block Layout */}
              <span class="rotating-text-span ...">
         {# ... #}
        ```
    *   [ ] **22.2.2 Apply Text Line Height:** Modify the `.rotating-text-span`. Replace any existing `leading-*` class with `leading-[3rem]`. Ensure `relative block whitespace-nowrap` and text size/color classes are present.
        ```html
         <span class="rotating-text-span relative block whitespace-nowrap text-cyan-400 font-semibold text-3xl md:text-4xl leading-[3rem]"> {/* Explicit Line Height */}
             Architects<br>
             Urban Planners<br>
             Landscape Architects<br>
             Interior Designers<br>
             Real Estate Developers<br>
             Architects {# Repeat first item #}
         </span>
        ```
    *   [ ] **22.2.3 Adjust Button Margins:** Verify `mt-*` on the button container below provides adequate spacing.

- [ ] **22.3 Define CSS Keyframes with Matching Steps (`static/css/components/rotating_text.css`):**
    *   [ ] **22.3.1 Verify CSS File:** Ensure `static/css/components/rotating_text.css` exists and is imported in `main.css`.
    *   [ ] **22.3.2 Define Keyframes:** Define `@keyframes rotateVertical`. Use the explicit height (`3rem`) for the `translateY` steps.
        ```css
        /* static/css/components/rotating_text.css */
        @keyframes rotateVertical {
            /* Steps based on explicit 3rem height */
            0%,  14% { transform: translateY(0); }      /* Item 1 at 0rem */
            17%, 31% { transform: translateY(-3rem); }  /* Item 2 */
            34%, 48% { transform: translateY(-6rem); }  /* Item 3 */
            51%, 65% { transform: translateY(-9rem); }  /* Item 4 */
            68%, 82% { transform: translateY(-12rem); } /* Item 5 */
            85%, 100%{ transform: translateY(-15rem); } /* Repeat Item 1 */
        }
        ```
    *   [ ] **22.3.3 Apply Animation:** Ensure the `.rotating-text-span` rule applies the animation and essential properties:
        ```css
        .rotating-text-span {
            position: relative; /* Essential */
            display: block;
            animation: rotateVertical 12s ease-in-out infinite; /* Adjust duration as needed */
        }
        ```

- [ ] **22.4 Build & Verify:**
    *   [ ] **22.4.1 Run Tailwind Build:** `npm run build:css`. Check for errors.
    *   [ ] **22.4.2 Run Dev Server:** `python manage.py runserver`.
    *   [ ] **22.4.3 Test Animation:** Load homepage. **Critically verify:** Does the text cycle smoothly? Is **exactly one line visible** at a time without any clipping (top or bottom)? Is the vertical alignment within the `3rem` window correct?
    *   [ ] **22.4.4 Test Responsiveness:** Check on different screen sizes. How does the fixed `3rem` height look when the font size shrinks to `text-3xl`? Is the extra vertical space acceptable, or does it look awkward? *(Potential trade-off)*.
    *   [ ] **22.4.5 Report:** Confirm functionality or describe specific clipping/alignment/responsiveness issues.

- [ ] **22.5 Contingency Plan (If Pure CSS Fails):**
    *   If significant clipping or alignment issues persist even with explicit pixel/rem values, or if the responsiveness trade-off is unacceptable, acknowledge that the pure CSS approach might be too brittle for responsive text sizes within a fixed container.
    *   Revert the changes made in this phase (using version control).
    *   Propose proceeding with a **JavaScript-driven approach** where JS calculates the *current* line height of the text dynamically (on load and resize) and updates both the container height and the animation offsets accordingly.

- [ ] **22.6 Documentation & Memory Update (Upon Success):**
    *   [ ] **22.6.1 Update Docs/README:** Document the explicit-height CSS rotating text implementation.
    *   [ ] **22.6.2 Update Rules:** Update frontend rules if applicable.
    *   [ ] **22.6.3 Update Memory Bank:** Update `progress.md`, `active_context.md`, `system_patterns.md`.

- [ ] **22.7 Version Control Checkpoint (Upon Success):** Stage changes (template, CSS, docs, memory). Generate commit message (e.g., "feat(frontend): Implement CSS rotating text in hero with explicit height"). Await confirmation.

---