from rest_framework import serializers
from .models import NewsPost # Only need NewsPost now
from django.contrib.auth.models import User


# --- Serializer for NewsPost Creation --- 
# Renamed from ArticleCreateSerializer
class NewsPostCreateSerializer(serializers.ModelSerializer):
    # Allow featured_image to be uploaded via the API
    featured_image = serializers.ImageField(required=False, allow_null=True)

    class Meta:
        model = NewsPost # Use NewsPost model
        # Include fields agent can submit: title, content, featured_image
        fields = ['title', 'content', 'featured_image']
        # Note: Status defaults to 'draft' in the model
        # Note: Slug is auto-generated by model's save method

    # No create method override needed, as author doesn't exist on NewsPost
    # and slug/status are handled by the model.

# --- New Serializer for Creation --- 

# Author is set automatically in create, so make it read-only for input validation
# Slug is handled by explicit definition above
read_only_fields = ['author', 'author_username', 'created_date', 'updated_date']

def create(self, validated_data):
    # Automatically set the author based on the requesting user
    validated_data['author'] = self.context['request'].user
    return super().create(validated_data)

class ArticleCreateSerializer(serializers.ModelSerializer):
    class Meta:
        model = NewsPost
        # Only include fields the agent submits
        fields = ['title', 'content']
        # No need for read_only_fields here

    # Create method is still needed to set author, slug generation handled by model.save()
    def create(self, validated_data):
        """Set author from request and save."""
        validated_data['author'] = self.context['request'].user
        # Slug will be generated by model's save method
        return super().create(validated_data) 