---
description: Current active tasks list
globs: 
alwaysApply: false
---

# TASKS: Architectural Visualization Platform Build

**Note:** Tasks for Phases 1 through 17 have been completed and archived in @file:docs/archived_tasks_phase_1_to_17.md.
This file contains tasks starting from Phase 18.

**AI Assistant Guidance:** Please follow these tasks sequentially, adhering to all guidelines in @file:.cursor/rules/00_core_assistant_protocol.mdc and any technology-specific rules referenced or created. Await confirmation before proceeding to the next numbered task. Refer to the memory bank (@file:memory-bank/*) for project context.

---

**Phase 18: Centralized CSS Variable Theming for Development**

*AI Assistant Guidance: Implement a centralized system for managing core theme colors and fonts using CSS Custom Properties (Variables) defined in a dedicated CSS file. Configure Tailwind to use these variables, allowing easy theme experimentation during development by modifying a single file. Implement basic light/dark mode support using these variables.*

- [ ] **18.1 Create Dedicated Theme CSS File:**
    *   **18.1.1 Create File:** Create a new CSS file specifically for theme definitions: `static/css/theme_variables.css`.
    *   **18.1.2 Import into Main CSS:** In your main Tailwind input file (@file:static/css/input.css), add an `@import` statement at the very top (before `@tailwind base`):
        ```css
        @import "./theme_variables.css"; /* Import theme variables first */

        @tailwind base;
        @tailwind components;
        @tailwind utilities;
        /* ... rest of input.css ... */
        ```

- [ ] **18.2 Define CSS Theme Variables (`theme_variables.css`):**
    *   **18.2.1 Define Light Theme (within `:root`):** Open `static/css/theme_variables.css`. Define your core color and font variables within the `:root` scope. Use descriptive names. Start with values inspired by the v0 `globals.txt` or your preference.
        ```css
        /* static/css/theme_variables.css */
        :root {
            /* === Light Theme Colors === */
            --color-primary: 222.2 47.4% 11.2%; /* Example: Dark Blue */
            --color-primary-foreground: 210 40% 98%; /* Example: Light Gray/White */

            --color-secondary: 210 40% 96.1%; /* Example: Very Light Gray */
            --color-secondary-foreground: 222.2 47.4% 11.2%; /* Example: Dark Blue */

            --color-background: 0 0% 100%; /* Example: White */
            --color-foreground: 222.2 84% 4.9%; /* Example: Near Black */

            --color-muted: 210 40% 96.1%; /* Example: Very Light Gray */
            --color-muted-foreground: 215.4 16.3% 46.9%; /* Example: Medium Gray */

            --color-accent: 199 98% 48%; /* Example: Bright Cyan/Blue (like v0 CTA) - Use HSL */
            --color-accent-foreground: 210 40% 98%; /* Example: White */

            --color-border: 214.3 31.8% 91.4%; /* Example: Light Gray */

            /* === Fonts === */
            --font-heading: 'Inter', sans-serif; /* Example */
            --font-body: 'Inter', sans-serif; /* Example */

             /* === Other UI Elements === */
            --radius: 0.5rem; /* Example */
            
            /* --- Add HSL versions of colors needed by Tailwind --- */
            --primary-hsl: var(--color-primary); /* Directly use HSL string */
            --secondary-hsl: var(--color-secondary);
            --background-hsl: var(--color-background);
            --foreground-hsl: var(--color-foreground);
            --muted-hsl: var(--color-muted);
            --accent-hsl: var(--color-accent);
            --border-hsl: var(--color-border);
            /* ... add others as needed ... */
        }
        ```
    *   **18.2.2 Define Dark Theme (within `.dark`):** Immediately below the `:root` block, define overrides for dark mode using the `.dark` selector (Tailwind standard). Use values inspired by the v0 `.dark` block or your preferences.
        ```css
        /* static/css/theme_variables.css (continued) */
        .dark {
            /* === Dark Theme Overrides === */
            --color-primary: 210 40% 98%; /* Example: Light Gray/White */
            --color-primary-foreground: 222.2 47.4% 11.2%; /* Example: Dark Blue */

            --color-secondary: 217.2 32.6% 17.5%; /* Example: Dark Gray/Blue */
            --color-secondary-foreground: 210 40% 98%; /* Example: Light Gray/White */

            --color-background: 222.2 84% 4.9%; /* Example: Near Black */
            --color-foreground: 210 40% 98%; /* Example: Light Gray/White */

            --color-muted: 217.2 32.6% 17.5%; /* Example: Dark Gray/Blue */
            --color-muted-foreground: 215 20.2% 65.1%; /* Example: Lighter Gray */

            --color-accent: 199 98% 58%; /* Example: Brighter Cyan for dark mode */
            --color-accent-foreground: 222.2 84% 4.9%; /* Example: Near Black */

            --color-border: 217.2 32.6% 17.5%; /* Example: Dark Gray/Blue */

            /* --- HSL versions for Dark Mode --- */
            --primary-hsl: var(--color-primary);
            --secondary-hsl: var(--color-secondary);
            --background-hsl: var(--color-background);
            --foreground-hsl: var(--color-foreground);
            --muted-hsl: var(--color-muted);
            --accent-hsl: var(--color-accent);
            --border-hsl: var(--color-border);
            /* ... add others as needed ... */
        }
        ```
        *(AI: Ensure HSL values are used where Tailwind expects them, primarily for the color definitions in tailwind.config.js).*

- [ ] **18.3 Configure Tailwind to Use Theme Variables (`tailwind.config.js`):**
    *   **18.3.1 Update `theme.extend.colors`:** Modify Tailwind colors to reference the HSL versions of the CSS variables. This allows Tailwind to generate opacity variants correctly (e.g., `bg-primary/50`).
        ```javascript
        // tailwind.config.js -> theme.extend.colors
        colors: {
          border: 'hsl(var(--border-hsl))', // Use HSL var
          // input: 'hsl(var(--input-hsl))', // Define if needed
          // ring: 'hsl(var(--ring-hsl))', // Define if needed
          background: 'hsl(var(--background-hsl))',
          foreground: 'hsl(var(--foreground-hsl))',
          primary: {
            DEFAULT: 'hsl(var(--primary-hsl))',
            foreground: 'hsl(var(--primary-foreground))', // May need its own HSL var if it changes significantly
          },
          secondary: {
            DEFAULT: 'hsl(var(--secondary-hsl))',
            foreground: 'hsl(var(--secondary-foreground))', // May need its own HSL var
          },
          muted: {
            DEFAULT: 'hsl(var(--muted-hsl))',
            foreground: 'hsl(var(--muted-foreground))', // May need its own HSL var
          },
          accent: {
            DEFAULT: 'hsl(var(--accent-hsl))',
            foreground: 'hsl(var(--accent-foreground))', // May need its own HSL var
          },
          // destructive: { ... } // Define if needed
          // card: { ... } // Define if needed
          // popover: { ... } // Define if needed
          // Remove or keep custom palettes like cyan/slate based on whether they should be themeable
        },
        ```
    *   **18.3.2 Update `theme.extend.fontFamily`:** Reference the CSS variables:
        ```javascript
        // tailwind.config.js -> theme.extend.fontFamily
        fontFamily: {
          sans: ['var(--font-body)', 'sans-serif'],
          heading: ['var(--font-heading)', 'sans-serif'],
        },
        ```
    *   **18.3.3 Enable Dark Mode:** Set `darkMode: 'class'` in `tailwind.config.js` to enable class-based dark mode switching.
    *   **18.3.4 Re-run Tailwind Build:** Execute `npm run build-css`.

- [ ] **18.4 Apply Base Theme Styles (`base.html` & `input.css`):**
    *   **18.4.1 Apply Base Fonts/Colors:** Ensure the `@layer base` styles in `input.css` (or directly on `body` in `base.html`) use the core theme classes:
        ```css
        /* input.css */
        @layer base {
          body {
            @apply bg-background text-foreground font-sans; /* Use theme classes */
          }
          h1, h2, h3, h4, h5, h6 {
            @apply font-heading; /* Apply heading font */
          }
        }
        ```
    *   **18.4.2 Add Dark Mode Toggle (Simple):** Add a basic mechanism to toggle the `dark` class on the `<html>` element. This could be a simple button in the footer (`_footer.html`) with basic JavaScript in `script.js` to add/remove the class and potentially store the preference in `localStorage`.
        ```javascript
        // Example simple toggle in script.js
        const themeToggleBtn = document.getElementById('theme-toggle');
        const htmlElement = document.documentElement;

        // Load saved theme
        if (localStorage.getItem('theme') === 'dark') {
          htmlElement.classList.add('dark');
        }

        themeToggleBtn?.addEventListener('click', () => {
          htmlElement.classList.toggle('dark');
          // Save preference
          if (htmlElement.classList.contains('dark')) {
            localStorage.setItem('theme', 'dark');
          } else {
            localStorage.removeItem('theme');
          }
        });
        ```
        *(AI: Implement this basic toggle button/JS or suggest a library like `next-themes` if preferred, though vanilla JS is simpler initially).*

- [ ] **18.5 Refactor Templates to Use Themed Classes:**
    *   **18.5.1 Systematic Replacement:** Go through key templates (`base.html`, partials, `home.html`, list/detail pages) and replace hardcoded color/font classes (e.g., `bg-cyan-400`, `text-slate-900`, `font-bold`) with the theme-aware classes (`bg-primary`, `text-foreground`, `font-heading`, `font-bold` etc.). Pay attention to light-on-dark vs. dark-on-light text (`text-foreground` vs `text-primary-foreground`).
    *   **Focus Areas:** Buttons (use `bg-primary text-primary-foreground`), links (use `text-primary` or `text-accent`), backgrounds (`bg-background`, `bg-secondary`, `bg-dark-bg`), text (`text-foreground`, `text-muted-foreground`, `text-dark-fg`).
    *   *(AI: Systematically perform this refactoring across specified templates).*

- [ ] **18.6 Verification:**
    *   **18.6.1 Check Default (Light) Theme:** Run dev server. Verify site renders correctly using colors/fonts defined in `:root`. Check all key components (buttons, cards, text, backgrounds).
    *   **18.6.2 Test Dark Mode:** Use the toggle button (if implemented) or manually add `class="dark"` to `<html>` in dev tools. Verify site switches to dark theme colors defined in `.dark`. Check readability and contrast in dark mode.
    *   **18.6.3 Test Theme Editing:** **Manually edit** a color or font value in `static/css/theme_variables.css`. **Re-run the Tailwind build (`npm run build-css`)**. Hard refresh the browser page. Verify the change is reflected visually. *(This simulates the developer experimentation workflow).*

- [ ] **18.7 Documentation & Memory Update:**
    *   **18.7.1 Update `README.md`/Docs:** Explain the new CSS variable theming system. Detail where variables are defined (`theme_variables.css`), how Tailwind uses them (`tailwind.config.js`), how to modify the theme during development, and how dark mode works.
    *   **18.7.2 Update Rules:** Create/Update `.cursor/rules/frontend/theming_rules.mdc`. Explain the CSS variable convention, Tailwind mapping, and mandate using theme classes (`bg-primary`, etc.) in templates.
    *   **18.7.3 Update Memory Bank:** Update `tech_context.md` (CSS variables, Tailwind theme config, dark mode approach), `system_patterns.md` (theming pattern), `progress.md`, `active_context.md`.

- [ ] **18.8 Version Control Checkpoint:** Stage changes (CSS files, config files, template refactoring, JS toggle, rules, docs, memory). Generate commit message (e.g., "feat(frontend): Implement centralized CSS variable theming with light/dark mode support"). Await confirmation to commit.

---

*End of currently defined tasks.*